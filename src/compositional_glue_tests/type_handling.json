{
    "UtilTest": "{}.as(UtilTest.class)",
    "Iterator<String>": "{}.as(Iterator.class)",
    "ArrayList<Object>": "{}.as(ArrayList.class)",
    "PatternOptionBuilderTest": "{}.as(PatternOptionBuilderTest.class)",
    "MalformedURLException": "{}.as(MalformedURLException.class)",
    "Comparator<Option>": "{}.as(Comparator.class)",
    "Cloneable": "{}.as(Cloneable.class)",
    "Class<String>": "{}.as(Class.class)",
    "Long": "{}.as(Long.class)",
    "LinkedHashMap<String,OptionGroup>": "{}.as(LinkedHashMap.class)",
    "AlreadySelectedException": "{}.as(AlreadySelectedException.class)",
    "ValuesTest": "{}.as(ValuesTest.class)",
    "NotInstantiable": "{}.as(NotInstantiable.class)",
    "URL": "{}.as(URL.class)",
    "TestOption": "{}.as(TestOption.class)",
    "Appendable": "{}.as(Appendable.class)",
    "String": "{}.as(String.class)",
    "?": "{}.as(?.class)",
    "V[]": "{}.as(V[].class)",
    "PosixParser": "{}.as(PosixParser.class)",
    "GnuParser": "{}.as(GnuParser.class)",
    "ArrayList<Option>": "{}.as(ArrayList.class)",
    "ListIterator<String>": "{}.as(ListIterator.class)",
    "long": "{}.as(long.class)",
    "Instantiable": "{}.as(Instantiable.class)",
    "OptionsTest": "{}.as(OptionsTest.class)",
    "ByteArrayOutputStream": "{}.as(ByteArrayOutputStream.class)",
    "ValueTest": "{}.as(ValueTest.class)",
    "Class<>": "{}.as(Class.class)",
    "Iterator<?>": "{}.as(Iterator.class)",
    "PosixParserTest": "{}.as(PosixParserTest.class)",
    "List<Object>": "{}.as(List.class)",
    "List<StringBuffer>": "{}.as(List.class)",
    "Exception": "{}.as(Exception.class)",
    "TypeHandler": "{}.as(TypeHandler.class)",
    "Option[]": "{}.as(Option[].class)",
    "IOException": "{}.as(IOException.class)",
    "UnrecognizedOptionException": "{}.as(UnrecognizedOptionException.class)",
    "ApplicationTest": "{}.as(ApplicationTest.class)",
    "Class<File>": "{}.as(Class.class)",
    "BufferedReader": "{}.as(BufferedReader.class)",
    "BugCLI252Test": "{}.as(BugCLI252Test.class)",
    "Map<String,Option>": "{}.as(Map.class)",
    "Options": "{}.as(Options.class)",
    "TypeHandlerTest": "{}.as(TypeHandlerTest.class)",
    "Integer": "{}.as(Integer.class)",
    "File[]": "{}.as(File[].class)",
    "Number": "{}.as(Number.class)",
    "BugCLI265Test": "{}.as(BugCLI265Test.class)",
    "ArgumentIsOptionTest": "{}.as(ArgumentIsOptionTest.class)",
    "HashSet<OptionGroup>": "{}.as(HashSet.class)",
    "Enumeration<?>": "{}.as(Enumeration.class)",
    "Boolean": "{}.as(Boolean.class)",
    "BugCLI162Test": "{}.as(BugCLI162Test.class)",
    "OptionValidator": "{}.as(OptionValidator.class)",
    "MissingArgumentException": "{}.as(MissingArgumentException.class)",
    "PatternOptionBuilder": "{}.as(PatternOptionBuilder.class)",
    "Class<FileInputStream>": "{}.as(Class.class)",
    "Class<?>": "{}.as(Class.class)",
    "Character": "{}.as(Character.class)",
    "DefaultParserTest": "{}.as(DefaultParserTest.class)",
    "OptionGroupTest": "{}.as(OptionGroupTest.class)",
    "Builder": "{}.as(Builder.class)",
    "DefaultParser": "{}.as(DefaultParser.class)",
    "BasicParser": "{}.as(BasicParser.class)",
    "BugsTest": "{}.as(BugsTest.class)",
    "CommandLineParser": "{}.as(CommandLineParser.class)",
    "Class<File[]>": "{}.as(Class.class)",
    "LinkedList<String>": "{}.as(LinkedList.class)",
    "Arrays": "{}.as(Arrays.class)",
    "ParserTestCase": "{}.as(ParserTestCase.class)",
    "Collections": "{}.as(Collections.class)",
    "UnsupportedOperationException": "{}.as(UnsupportedOperationException.class)",
    "HelpFormatterTest": "{}.as(HelpFormatterTest.class)",
    "ArrayList<>": "{}.as(ArrayList.class)",
    "T": "{}.as(T.class)",
    "GnuParserTest": "{}.as(GnuParserTest.class)",
    "BugCLI71Test": "{}.as(BugCLI71Test.class)",
    "ArrayList<StringBuffer>": "{}.as(ArrayList.class)",
    "BugCLI133Test": "{}.as(BugCLI133Test.class)",
    "DisablePartialMatchingTest": "{}.as(DisablePartialMatchingTest.class)",
    "BugCLI148Test": "{}.as(BugCLI148Test.class)",
    "OptionComparator": "{}.as(OptionComparator.class)",
    "OptionTest": "{}.as(OptionTest.class)",
    "List<?>": "{}.as(List.class)",
    "Class<Date>": "{}.as(Class.class)",
    "Object": "{}.as(Object.class)",
    "String[]": "{}.as(String[].class)",
    "File": "{}.as(File.class)",
    "RuntimeException": "{}.as(RuntimeException.class)",
    "Util": "{}.as(Util.class)",
    "BasicParserTest": "{}.as(BasicParserTest.class)",
    "Assert": "{}.as(Assert.class)",
    "LinkedHashMap<String,Option>": "{}.as(LinkedHashMap.class)",
    "StringBuilder": "{}.as(StringBuilder.class)",
    "List<Option>": "{}.as(List.class)",
    "HelpFormatter": "{}.as(HelpFormatter.class)",
    "MissingOptionException": "{}.as(MissingOptionException.class)",
    "Serializable": "{}.as(Serializable.class)",
    "StringReader": "{}.as(StringReader.class)",
    "CloneNotSupportedException": "{}.as(CloneNotSupportedException.class)",
    "DefaultOption": "{}.as(DefaultOption.class)",
    "ParseException": "{}.as(ParseException.class)",
    "char": "{}.as(char.class)",
    "CommandLine": "{}.as(CommandLine.class)",
    "CommandLineTest": "{}.as(CommandLineTest.class)",
    "BugCLI18Test": "{}.as(BugCLI18Test.class)",
    "AmbiguousOptionException": "{}.as(AmbiguousOptionException.class)",
    "Iterator<Option>": "{}.as(Iterator.class)",
    "Calendar": "{}.as(Calendar.class)",
    "OptionBuilder": "{}.as(OptionBuilder.class)",
    "Collection<String>": "{}.as(Collection.class)",
    "OptionBuilderTest": "{}.as(OptionBuilderTest.class)",
    "Class<URL>": "{}.as(Class.class)",
    "OptionGroup": "{}.as(OptionGroup.class)",
    "ArrayList<OptionGroup>": "{}.as(ArrayList.class)",
    "List<String>": "IntegrationUtils.valueArrayToCollection({}, String.class, ArrayList.class)",
    "StringBuffer": "{}.as(StringBuffer.class)",
    "PrintStream": "{}.as(PrintStream.class)",
    "Class<Number>": "{}.as(Class.class)",
    "StringWriter": "{}.as(StringWriter.class)",
    "boolean": "{}.as(boolean.class)",
    "BugCLI13Test": "{}.as(BugCLI13Test.class)",
    "Class<T>": "{}.as(Class.class)",
    "Collection<Option>": "{}.as(Collection.class)",
    "List<>": "{}.as(List.class)",
    "Double": "{}.as(Double.class)",
    "FileNotFoundException": "{}.as(FileNotFoundException.class)",
    "Properties": "{}.as(Properties.class)",
    "BugCLI266Test": "{}.as(BugCLI266Test.class)",
    "FileInputStream": "{}.as(FileInputStream.class)",
    "System": "{}.as(System.class)",
    "NumberFormatException": "{}.as(NumberFormatException.class)",
    "Map<String,OptionGroup>": "{}.as(Map.class)",
    "IllegalArgumentException": "{}.as(IllegalArgumentException.class)",
    "Parser": "{}.as(Parser.class)",
    "Vector<Object>": "{}.as(Vector.class)",
    "ArrayList<String>": "{}.as(ArrayList.class)",
    "Collection<OptionGroup>": "{}.as(Collection.class)",
    "ClassNotFoundException": "{}.as(ClassNotFoundException.class)",
    "void": "{}.as(void.class)",
    "Option": "{}.as(Option.class)",
    "int": "{}.asLong()",
    "PrintWriter": "{}.as(PrintWriter.class)",
    "Date": "{}.as(Date.class)",
    "Objects": "{}.as(Objects.class)",
    "Float": "{}.as(Float.class)",
    "Class<Object>": "{}.as(Class.class)",
    "AllocateDirectHexTest": "{}.as(AllocateDirectHexTest.class)",
    "Caverphone2": "{}.as(Caverphone2.class)",
    "Matcher": "{}.as(Matcher.class)",
    "Base16OutputStream": "{}.as(Base16OutputStream.class)",
    "Nysiis": "{}.as(Nysiis.class)",
    "Base64InputStream": "{}.as(Base64InputStream.class)",
    "DecoderException": "{}.as(DecoderException.class)",
    "Map<String,Map<String,List<Rule>>>": "{}.as(Map.class)",
    "BinaryCodec": "{}.as(BinaryCodec.class)",
    "BitSet": "{}.as(BitSet.class)",
    "Charsets": "{}.as(Charsets.class)",
    "HashSet<String>": "{}.as(HashSet.class)",
    "Charset": "{}.as(Charset.class)",
    "StringDecoder": "{}.as(StringDecoder.class)",
    "NameType": "{}.as(NameType.class)",
    "StringEncoderAbstractTest": "{}.as(StringEncoderAbstractTest.class)",
    "ComparisonFailure": "{}.as(ComparisonFailure.class)",
    "Encoder": "{}.as(Encoder.class)",
    "Blake3": "{}.as(Blake3.class)",
    "Base64Test": "{}.as(Base64Test.class)",
    "StringEncoderAbstractTest<Soundex>": "{}.as(StringEncoderAbstractTest.class)",
    "byte[][]": "{}.as(byte[][].class)",
    "List<Object[]>": "{}.as(List.class)",
    "Base16TestData": "{}.as(Base16TestData.class)",
    "BaseNCodecTest": "{}.as(BaseNCodecTest.class)",
    "Set<Branch>": "{}.as(Set.class)",
    "RuleType": "{}.as(RuleType.class)",
    "Phoneme": "{}.as(Phoneme.class)",
    "Base16": "{}.as(Base16.class)",
    "StringEncoderAbstractTest<ColognePhonetic>": "{}.as(StringEncoderAbstractTest.class)",
    "LinkedHashSet<Branch>": "{}.as(LinkedHashSet.class)",
    "B64Test": "{}.as(B64Test.class)",
    "Runtime": "{}.as(Runtime.class)",
    "BaseNCodecOutputStream": "{}.as(BaseNCodecOutputStream.class)",
    "Math": "{}.as(Math.class)",
    "EngineState": "{}.as(EngineState.class)",
    "EnumMap<NameType,Lang>": "{}.as(EnumMap.class)",
    "Comparator<>": "{}.as(Comparator.class)",
    "Context": "{}.as(Context.class)",
    "RunTest": "{}.as(RunTest.class)",
    "ArrayList<BenchResult>": "{}.as(ArrayList.class)",
    "PhoneticEngineRegressionTest": "{}.as(PhoneticEngineRegressionTest.class)",
    "BaseNTestData": "{}.as(BaseNTestData.class)",
    "BinaryCodecTest": "{}.as(BinaryCodecTest.class)",
    "Parameterized": "{}.as(Parameterized.class)",
    "long[]": "{}.as(long[].class)",
    "RefinedSoundex": "{}.as(RefinedSoundex.class)",
    "ResourceConstants": "{}.as(ResourceConstants.class)",
    "RFC1522Codec": "{}.as(RFC1522Codec.class)",
    "BaseNCodec": "{}.as(BaseNCodec.class)",
    "NoOpBaseNCodec": "{}.as(NoOpBaseNCodec.class)",
    "Resources": "{}.as(Resources.class)",
    "MetaphoneTest": "{}.as(MetaphoneTest.class)",
    "LinkedHashSet<Phoneme>": "{}.as(LinkedHashSet.class)",
    "Map<NameType,Map<RuleType,Map<String,Map<String,List<Rule>>>>>": "{}.as(Map.class)",
    "QuotedPrintableCodec": "{}.as(QuotedPrintableCodec.class)",
    "HashMap<Character,Character>": "{}.as(HashMap.class)",
    "Comparator<Phoneme>": "{}.as(Comparator.class)",
    "Set<String>": "{}.as(Set.class)",
    "StringEncoderAbstractTest<DaitchMokotoffSoundex>": "{}.as(StringEncoderAbstractTest.class)",
    "Table": "{}.as(Table.class)",
    "BinaryDecoder": "{}.as(BinaryDecoder.class)",
    "List<Phoneme>": "{}.as(List.class)",
    "TreeMap<Phoneme,Phoneme>": "{}.as(TreeMap.class)",
    "AssertionError": "{}.as(AssertionError.class)",
    "Map<Phoneme,Phoneme>": "{}.as(Map.class)",
    "Base16InputStreamTest": "{}.as(Base16InputStreamTest.class)",
    "MurmurHash2": "{}.as(MurmurHash2.class)",
    "Decoder": "{}.as(Decoder.class)",
    "UnsupportedEncodingException": "{}.as(UnsupportedEncodingException.class)",
    "HmacAlgorithms": "{}.as(HmacAlgorithms.class)",
    "Caverphone2Test": "{}.as(Caverphone2Test.class)",
    "Caverphone1": "{}.as(Caverphone1.class)",
    "Class<? extends Checksum>": "{}.as(Class.class)",
    "StringEncoderAbstractTest<Nysiis>": "{}.as(StringEncoderAbstractTest.class)",
    "Hex": "{}.as(Hex.class)",
    "Constructor<? extends Checksum>": "{}.as(Constructor.class)",
    "SoundexTest": "{}.as(SoundexTest.class)",
    "RPattern": "{}.as(RPattern.class)",
    "String[][]": "{}.as(String[][].class)",
    "Short": "{}.as(Short.class)",
    "IndexOutOfBoundsException": "{}.as(IndexOutOfBoundsException.class)",
    "List<BenchResult>": "{}.as(List.class)",
    "CRC32": "{}.as(CRC32.class)",
    "Scanner": "{}.as(Scanner.class)",
    "Rule": "{}.as(Rule.class)",
    "Base16InputStream": "{}.as(Base16InputStream.class)",
    "URISyntaxException": "{}.as(URISyntaxException.class)",
    "short": "{}.as(short.class)",
    "OutputStream": "{}.as(OutputStream.class)",
    "SomeLanguages": "{}.as(SomeLanguages.class)",
    "EnumMap<NameType,Languages>": "{}.as(EnumMap.class)",
    "Map<RuleType,Map<String,Map<String,List<Rule>>>>": "{}.as(Map.class)",
    "CologneInputBuffer": "{}.as(CologneInputBuffer.class)",
    "NysiisTest": "{}.as(NysiisTest.class)",
    "Set<Phoneme>": "{}.as(Set.class)",
    "Throwable": "{}.as(Throwable.class)",
    "IncrementalHash32x86": "{}.as(IncrementalHash32x86.class)",
    "MatchRatingApproachEncoderTest": "{}.as(MatchRatingApproachEncoderTest.class)",
    "PhoneticEngineTest": "{}.as(PhoneticEngineTest.class)",
    "HexTest": "{}.as(HexTest.class)",
    "CologneOutputBuffer": "{}.as(CologneOutputBuffer.class)",
    "StringEncoderAbstractTest<Caverphone2>": "{}.as(StringEncoderAbstractTest.class)",
    "ClassCastException": "{}.as(ClassCastException.class)",
    "ArrayList<Phoneme>": "{}.as(ArrayList.class)",
    "LangRule": "{}.as(LangRule.class)",
    "Sha2CryptTest": "{}.as(Sha2CryptTest.class)",
    "ByteArrayInputStream": "{}.as(ByteArrayInputStream.class)",
    "Object[][]": "{}.as(Object[][].class)",
    "CologneBuffer": "{}.as(CologneBuffer.class)",
    "Iterable<Phoneme>": "{}.as(Iterable.class)",
    "ArrayList<Branch>": "{}.as(ArrayList.class)",
    "UnsupportedCharsetException": "{}.as(UnsupportedCharsetException.class)",
    "Base32Test": "{}.as(Base32Test.class)",
    "Map<Character,Character>": "{}.as(Map.class)",
    "PhonemeExpr": "{}.as(PhonemeExpr.class)",
    "Thread": "{}.as(Thread.class)",
    "Locale": "{}.as(Locale.class)",
    "MessageDigestAlgorithms": "{}.as(MessageDigestAlgorithms.class)",
    "IncrementalHash32": "{}.as(IncrementalHash32.class)",
    "MatchRatingApproachEncoder": "{}.as(MatchRatingApproachEncoder.class)",
    "PureJavaCrc32Test": "{}.as(PureJavaCrc32Test.class)",
    "FilterOutputStream": "{}.as(FilterOutputStream.class)",
    "DoubleMetaphone2Test": "{}.as(DoubleMetaphone2Test.class)",
    "byte[]": "{}.as(byte[].class)",
    "List<Class<? extends Checksum>>": "{}.as(List.class)",
    "XXHash32Test": "{}.as(XXHash32Test.class)",
    "DoubleMetaphoneResult": "{}.as(DoubleMetaphoneResult.class)",
    "TestData": "{}.as(TestData.class)",
    "Iterable<String>": "{}.as(Iterable.class)",
    "Base64TestData": "{}.as(Base64TestData.class)",
    "PercentCodec": "{}.as(PercentCodec.class)",
    "HashMap<String,List<Rule>>": "{}.as(HashMap.class)",
    "Pattern": "{}.as(Pattern.class)",
    "Base32InputStreamTest": "{}.as(Base32InputStreamTest.class)",
    "Base16Test": "{}.as(Base16Test.class)",
    "List<LangRule>": "{}.as(List.class)",
    "AbstractCaverphone": "{}.as(AbstractCaverphone.class)",
    "QuotedPrintableCodecTest": "{}.as(QuotedPrintableCodecTest.class)",
    "B64": "{}.as(B64.class)",
    "Map<>": "{}.as(Map.class)",
    "RefinedSoundexTest": "{}.as(RefinedSoundexTest.class)",
    "Error": "{}.as(Error.class)",
    "RuleTest": "{}.as(RuleTest.class)",
    "QCodecTest": "{}.as(QCodecTest.class)",
    "Base32": "{}.as(Base32.class)",
    "Comparable<Comparable<?>>": "{}.as(Comparable.class)",
    "InputStream": "{}.as(InputStream.class)",
    "HashMap<Character,List<Rule>>": "{}.as(HashMap.class)",
    "IllegalStateException": "{}.as(IllegalStateException.class)",
    "UnixCrypt": "{}.as(UnixCrypt.class)",
    "int[][]": "{}.as(int[][].class)",
    "StringUtilsTest": "{}.as(StringUtilsTest.class)",
    "Comparable<?>": "{}.as(Comparable.class)",
    "ArrayList<LangRule>": "{}.as(ArrayList.class)",
    "StandardCharsets": "{}.as(StandardCharsets.class)",
    "BaseNCodecInputStream": "{}.as(BaseNCodecInputStream.class)",
    "Assume": "{}.as(Assume.class)",
    "Class<? extends Throwable>": "{}.as(Class.class)",
    "HmacUtils": "{}.as(HmacUtils.class)",
    "DaitchMokotoffSoundex": "{}.as(DaitchMokotoffSoundex.class)",
    "DecoderExceptionTest": "{}.as(DecoderExceptionTest.class)",
    "EncoderExceptionTest": "{}.as(EncoderExceptionTest.class)",
    "BeiderMorseEncoderTest": "{}.as(BeiderMorseEncoderTest.class)",
    "DaitchMokotoffSoundexTest": "{}.as(DaitchMokotoffSoundexTest.class)",
    "NullPointerException": "{}.as(NullPointerException.class)",
    "PhoneticEnginePerformanceTest": "{}.as(PhoneticEnginePerformanceTest.class)",
    "CharEncoding": "{}.as(CharEncoding.class)",
    "Branch": "{}.as(Branch.class)",
    "Phoneme[][]": "{}.as(Phoneme[][].class)",
    "ArrayIndexOutOfBoundsException": "{}.as(ArrayIndexOutOfBoundsException.class)",
    "CharSequenceUtils": "{}.as(CharSequenceUtils.class)",
    "CacheSubSequencePerformanceTest": "{}.as(CacheSubSequencePerformanceTest.class)",
    "Collection<Object[]>": "{}.as(Collection.class)",
    "MurmurHash3": "{}.as(MurmurHash3.class)",
    "EnumMap<NameType,Map<RuleType,Map<String,Map<String,List<Rule>>>>>": "{}.as(EnumMap.class)",
    "BCodec": "{}.as(BCodec.class)",
    "ChunkState": "{}.as(ChunkState.class)",
    "CharsetsTest": "{}.as(CharsetsTest.class)",
    "BeiderMorseEncoder": "{}.as(BeiderMorseEncoder.class)",
    "CharSequence": "{}.as(CharSequence.class)",
    "PureJavaCrc32": "{}.as(PureJavaCrc32.class)",
    "HashSet<E>": "{}.as(HashSet.class)",
    "Base64": "{}.as(Base64.class)",
    "boolean[]": "{}.as(boolean[].class)",
    "Map<NameType,Set<String>>": "{}.as(Map.class)",
    "Md5Crypt": "{}.as(Md5Crypt.class)",
    "Metaphone": "{}.as(Metaphone.class)",
    "PhonemeList": "{}.as(PhonemeList.class)",
    "EnumMap<RuleType,Map<String,Map<String,List<Rule>>>>": "{}.as(EnumMap.class)",
    "EncoderException": "{}.as(EncoderException.class)",
    "ArrayList<Class<? extends Checksum>>": "{}.as(ArrayList.class)",
    "Sha2Crypt": "{}.as(Sha2Crypt.class)",
    "Random": "{}.as(Random.class)",
    "Base32OutputStream": "{}.as(Base32OutputStream.class)",
    "NoSuchElementException": "{}.as(NoSuchElementException.class)",
    "BinaryEncoder": "{}.as(BinaryEncoder.class)",
    "BCodecTest": "{}.as(BCodecTest.class)",
    "BenchResult": "{}.as(BenchResult.class)",
    "Base64OutputStream": "{}.as(Base64OutputStream.class)",
    "QCodec": "{}.as(QCodec.class)",
    "ArrayList<Rule>": "{}.as(ArrayList.class)",
    "Map<String,List<Rule>>": "{}.as(Map.class)",
    "UtilsTest": "{}.as(UtilsTest.class)",
    "Base32InputStream": "{}.as(Base32InputStream.class)",
    "EnumMap<NameType,Set<String>>": "{}.as(EnumMap.class)",
    "StringEncoderAbstractTest<MatchRatingApproachEncoder>": "{}.as(StringEncoderAbstractTest.class)",
    "Soundex": "{}.as(Soundex.class)",
    "StringUtils": "{}.as(StringUtils.class)",
    "RulesApplication": "{}.as(RulesApplication.class)",
    "Crypt": "{}.as(Crypt.class)",
    "MurmurHash3Test": "{}.as(MurmurHash3Test.class)",
    "TestData[]": "{}.as(TestData[].class)",
    "PureJavaCrc32CTest": "{}.as(PureJavaCrc32CTest.class)",
    "FileOutputStream": "{}.as(FileOutputStream.class)",
    "Map<String,String>": "{}.as(Map.class)",
    "PhoneticEngine": "{}.as(PhoneticEngine.class)",
    "URLCodecTest": "{}.as(URLCodecTest.class)",
    "CharSequenceUtilsTest": "{}.as(CharSequenceUtilsTest.class)",
    "DoubleMetaphoneTest": "{}.as(DoubleMetaphoneTest.class)",
    "RFC1522CodecTest": "{}.as(RFC1522CodecTest.class)",
    "PureJavaCrc32C": "{}.as(PureJavaCrc32C.class)",
    "ThreadLocalRandom": "{}.as(ThreadLocalRandom.class)",
    "ColognePhonetic": "{}.as(ColognePhonetic.class)",
    "Base16OutputStreamTest": "{}.as(Base16OutputStreamTest.class)",
    "PhonemeBuilder": "{}.as(PhonemeBuilder.class)",
    "Entry<Character,List<Rule>>": "{}.as(Entry.class)",
    "MurmurHash2Test": "{}.as(MurmurHash2Test.class)",
    "XXHash32OverflowTest": "{}.as(XXHash32OverflowTest.class)",
    "Base64Codec13Test": "{}.as(Base64Codec13Test.class)",
    "Blake3Test": "{}.as(Blake3Test.class)",
    "ColognePhoneticTest": "{}.as(ColognePhoneticTest.class)",
    "CodecPolicy": "{}.as(CodecPolicy.class)",
    "TreeMap<String,String>": "{}.as(TreeMap.class)",
    "Map<NameType,Languages>": "{}.as(Map.class)",
    "StringEncoderAbstractTest<Metaphone>": "{}.as(StringEncoderAbstractTest.class)",
    "StringEncoderAbstractTest<Caverphone1>": "{}.as(StringEncoderAbstractTest.class)",
    "StringEncoder": "{}.as(StringEncoder.class)",
    "RFC1522TestCodec": "{}.as(RFC1522TestCodec.class)",
    "StringEncoderAbstractTest<StringEncoder>": "{}.as(StringEncoderAbstractTest.class)",
    "Caverphone": "{}.as(Caverphone.class)",
    "CharEncodingTest": "{}.as(CharEncodingTest.class)",
    "StringEncoderAbstractTest<DoubleMetaphone>": "{}.as(StringEncoderAbstractTest.class)",
    "Output": "{}.as(Output.class)",
    "List<Rule>": "{}.as(List.class)",
    "List<Branch>": "{}.as(List.class)",
    "StringEncoderComparatorTest": "{}.as(StringEncoderComparatorTest.class)",
    "Base64OutputStreamTest": "{}.as(Base64OutputStreamTest.class)",
    "InputStreamReader": "{}.as(InputStreamReader.class)",
    "Base32OutputStreamTest": "{}.as(Base32OutputStreamTest.class)",
    "BigInteger": "{}.as(BigInteger.class)",
    "StringEncoderComparator": "{}.as(StringEncoderComparator.class)",
    "Codec105ErrorInputStream": "{}.as(Codec105ErrorInputStream.class)",
    "FilterInputStream": "{}.as(FilterInputStream.class)",
    "Caverphone1Test": "{}.as(Caverphone1Test.class)",
    "Utils": "{}.as(Utils.class)",
    "OutOfMemoryError": "{}.as(OutOfMemoryError.class)",
    "URLCodec": "{}.as(URLCodec.class)",
    "Comparator<Rule>": "{}.as(Comparator.class)",
    "ByteBuffer": "{}.as(ByteBuffer.class)",
    "Languages": "{}.as(Languages.class)",
    "LanguageGuessingTest": "{}.as(LanguageGuessingTest.class)",
    "double": "{}.as(double.class)",
    "SoundexUtils": "{}.as(SoundexUtils.class)",
    "Blake3TestVectorsTest": "{}.as(Blake3TestVectorsTest.class)",
    "DoubleMetaphone": "{}.as(DoubleMetaphone.class)",
    "PerformanceTest": "{}.as(PerformanceTest.class)",
    "XXHash32": "{}.as(XXHash32.class)",
    "Base64InputStreamTest": "{}.as(Base64InputStreamTest.class)",
    "byte": "{}.as(byte.class)",
    "char[]": "{}.as(char[].class)",
    "Map<Character,List<Rule>>": "{}.as(Map.class)",
    "StringEncoderAbstractTest<RefinedSoundex>": "{}.as(StringEncoderAbstractTest.class)",
    "Digest": "{}.as(Digest.class)",
    "BinaryEncoderAbstractTest": "{}.as(BinaryEncoderAbstractTest.class)",
    "URI": "{}.as(URI.class)",
    "PercentCodecTest": "{}.as(PercentCodecTest.class)",
    "Map<NameType,Lang>": "{}.as(Map.class)",
    "HashMap<String,Map<String,List<Rule>>>": "{}.as(HashMap.class)",
    "LanguageSet": "{}.as(LanguageSet.class)",
    "Lang": "{}.as(Lang.class)",
    "Base32TestData": "{}.as(Base32TestData.class)",
    "Checksum": "{}.as(Checksum.class)",
    "Byte": "{}.as(Byte.class)",
    "int[]": "{}.as(int[].class)",
    "Function<Object[],Arguments>": "{}.as(Function.class)",
    "Object[]": "{}.as(Object[].class)",
    "E": "{}.as(E.class)",
    "Stream<CSVRecord>": "{}.as(Stream.class)",
    "Predicate<Arguments>": "{}.as(Predicate.class)",
    "Function<CSVRecord,List<String>>": "{}.as(Function.class)",
    "Predefined": "{}.as(Predefined.class)",
    "Iterable<CSVRecord>": "{}.as(Iterable.class)",
    "Spliterator<>": "{}.as(Spliterator.class)",
    "Paths": "{}.as(Paths.class)",
    "Stream<String>": "{}.as(Stream.class)",
    "JiraCsv203Test": "{}.as(JiraCsv203Test.class)",
    "PipedReader": "{}.as(PipedReader.class)",
    "IOUtils": "{}.as(IOUtils.class)",
    "FileReader": "{}.as(FileReader.class)",
    "JiraCsv148Test": "{}.as(JiraCsv148Test.class)",
    "JiraCsv263Test": "{}.as(JiraCsv263Test.class)",
    "Stats": "{}.as(Stats.class)",
    "JiraCsv288Test": "{}.as(JiraCsv288Test.class)",
    "CSVRecord": "{}.as(CSVRecord.class)",
    "ObjectOutputStream": "{}.as(ObjectOutputStream.class)",
    "Stream<Arguments>": "{}.as(Stream.class)",
    "JiraCsv93Test": "{}.as(JiraCsv93Test.class)",
    "IntFunction<String>": "{}.as(IntFunction.class)",
    "BiConsumer<String,Integer>": "{}.as(BiConsumer.class)",
    "Stream<>": "{}.as(Stream.class)",
    "CSVPrinter": "{}.as(CSVPrinter.class)",
    "Stream<File>": "{}.as(Stream.class)",
    "Path": "{}.as(Path.class)",
    "JiraCsv271Test": "{}.as(JiraCsv271Test.class)",
    "CSVPrinterTest": "{}.as(CSVPrinterTest.class)",
    "Iterator<CSVRecord>": "{}.as(Iterator.class)",
    "FilenameFilter": "{}.as(FilenameFilter.class)",
    "EmptyEnum": "{}.as(EmptyEnum.class)",
    "LinkedHashMap<K,V>": "{}.as(LinkedHashMap.class)",
    "CharBuffer": "{}.as(CharBuffer.class)",
    "ArrayList<CSVRecord>": "{}.as(ArrayList.class)",
    "CSVParserFactory": "{}.as(CSVParserFactory.class)",
    "ObjectInputStream": "{}.as(ObjectInputStream.class)",
    "Flushable": "{}.as(Flushable.class)",
    "ClassLoader": "{}.as(ClassLoader.class)",
    "CSVFormatTest": "{}.as(CSVFormatTest.class)",
    "Stream<?>": "{}.as(Stream.class)",
    "GZIPInputStream": "{}.as(GZIPInputStream.class)",
    "Token": "{}.as(Token.class)",
    "CSVParser": "{}.as(CSVParser.class)",
    "Assertions": "{}.as(Assertions.class)",
    "List<List<String>>": "{}.as(List.class)",
    "CSVParserTest": "{}.as(CSVParserTest.class)",
    "Consumer<CSVRecord>": "{}.as(Consumer.class)",
    "Header": "{}.as(Header.class)",
    "Function<Arguments,Stream<? extends Arguments>>": "{}.as(Function.class)",
    "CSVRecordIterator": "{}.as(CSVRecordIterator.class)",
    "PipedWriter": "{}.as(PipedWriter.class)",
    "IOUtilsTest": "{}.as(IOUtilsTest.class)",
    "Spliterators": "{}.as(Spliterators.class)",
    "Iterable<>": "{}.as(Iterable.class)",
    "LinkedHashMap<String,Integer>": "{}.as(LinkedHashMap.class)",
    "Map<String,Integer>": "{}.as(Map.class)",
    "TreeMap<String,Integer>": "{}.as(TreeMap.class)",
    "Arguments": "{}.as(Arguments.class)",
    "Method": "{}.as(Method.class)",
    "ExtendedBufferedReaderTest": "{}.as(ExtendedBufferedReaderTest.class)",
    "Writer": "{}.as(Writer.class)",
    "Iterable<?>": "{}.as(Iterable.class)",
    "JiraCsv253Test": "{}.as(JiraCsv253Test.class)",
    "Type": "{}.as(Type.class)",
    "CSVFormatPredefinedTest": "{}.as(CSVFormatPredefinedTest.class)",
    "Lexer": "{}.as(Lexer.class)",
    "JiraCsv248Test": "{}.as(JiraCsv248Test.class)",
    "Reader": "{}.as(Reader.class)",
    "CSVFormat": "{}.as(CSVFormat.class)",
    "Class<Lexer>": "{}.as(Class.class)",
    "CSVFileParserTest": "{}.as(CSVFileParserTest.class)",
    "List<CSVRecord>": "{}.as(List.class)",
    "Constants": "{}.as(Constants.class)",
    "JiraCsv249Test": "{}.as(JiraCsv249Test.class)",
    "Modifier": "{}.as(Modifier.class)",
    "Headers": "{}.as(Headers.class)",
    "Files": "{}.as(Files.class)",
    "Stream<? extends Arguments>": "{}.as(Stream.class)",
    "ExtendedBufferedReader": "{}.as(ExtendedBufferedReader.class)",
    "M": "{}.as(M.class)",
    "ArrayList<List<String>>": "{}.as(ArrayList.class)",
    "OutputStreamWriter": "{}.as(OutputStreamWriter.class)",
    "QuoteMode": "{}.as(QuoteMode.class)",
    "StreamSupport": "{}.as(StreamSupport.class)",
    "Consumer<?>": "{}.as(Consumer.class)",
    "LexerTest": "{}.as(LexerTest.class)",
    "Collectors": "{}.as(Collectors.class)",
    "Buffer": "{}.as(Buffer.class)",
    "T[]": "{}.as(T[].class)",
    "Closeable": "{}.as(Closeable.class)",
    "UncheckedIOException": "{}.as(UncheckedIOException.class)",
    "Executable": "{}.as(Executable.class)",
    "JiraCsv290Test": "{}.as(JiraCsv290Test.class)",
    "Constructor<Lexer>": "{}.as(Constructor.class)",
    "CSVDuplicateHeaderTest": "{}.as(CSVDuplicateHeaderTest.class)",
    "Enum<?>": "{}.as(Enum.class)",
    "DuplicateHeaderMode": "{}.as(DuplicateHeaderMode.class)",
    "ParsePosition": "{}.as(ParsePosition.class)",
    "Form": "{}.as(Form.class)",
    "IBANValidator": "{}.as(IBANValidator.class)",
    "CurrencyValidatorTest": "{}.as(CurrencyValidatorTest.class)",
    "CurrencyValidator": "{}.as(CurrencyValidator.class)",
    "ConcurrentHashMap<String,Validator>": "{}.as(ConcurrentHashMap.class)",
    "HttpURLConnection": "{}.as(HttpURLConnection.class)",
    "ISSNValidator": "{}.as(ISSNValidator.class)",
    "HashMap<String,String[]>": "{}.as(HashMap.class)",
    "TimeZone": "{}.as(TimeZone.class)",
    "IBANCheckDigit": "{}.as(IBANCheckDigit.class)",
    "Item": "{}.as(Item.class)",
    "DateFormatSymbols": "{}.as(DateFormatSymbols.class)",
    "DomainValidatorTest": "{}.as(DomainValidatorTest.class)",
    "Map<String,ResultStatus>": "{}.as(Map.class)",
    "ResultPair[]": "{}.as(ResultPair[].class)",
    "Map<String,Arg>[]": "{}.as(Map.class)",
    "Iterator<Entry<String,String>>": "{}.as(Iterator.class)",
    "Validator": "{}.as(Validator.class)",
    "ValidatorResults": "{}.as(ValidatorResults.class)",
    "SedolCheckDigitTest": "{}.as(SedolCheckDigitTest.class)",
    "EAN13CheckDigit": "{}.as(EAN13CheckDigit.class)",
    "CreditCardValidatorTest": "{}.as(CreditCardValidatorTest.class)",
    "TypeBean": "{}.as(TypeBean.class)",
    "Mastercard": "{}.as(Mastercard.class)",
    "CUSIPCheckDigit": "{}.as(CUSIPCheckDigit.class)",
    "TimeValidator": "{}.as(TimeValidator.class)",
    "Entry<String,String>": "{}.as(Entry.class)",
    "PercentValidator": "{}.as(PercentValidator.class)",
    "ShortValidator": "{}.as(ShortValidator.class)",
    "AbstractFormatValidator": "{}.as(AbstractFormatValidator.class)",
    "AbstractNumberValidator": "{}.as(AbstractNumberValidator.class)",
    "Iterator<Field>": "{}.as(Iterator.class)",
    "ModulusTenABACheckDigitTest": "{}.as(ModulusTenABACheckDigitTest.class)",
    "ArrayType": "{}.as(ArrayType.class)",
    "VerhoeffCheckDigitTest": "{}.as(VerhoeffCheckDigitTest.class)",
    "AbstractCheckDigitTest": "{}.as(AbstractCheckDigitTest.class)",
    "UrlTest": "{}.as(UrlTest.class)",
    "FloatValidatorTest": "{}.as(FloatValidatorTest.class)",
    "UrlValidator": "{}.as(UrlValidator.class)",
    "ModulusTenCUSIPCheckDigitTest": "{}.as(ModulusTenCUSIPCheckDigitTest.class)",
    "FieldTest": "{}.as(FieldTest.class)",
    "ISBNCheckDigit": "{}.as(ISBNCheckDigit.class)",
    "Iterator<Entry<String,Object>>": "{}.as(Iterator.class)",
    "FloatValidator": "{}.as(FloatValidator.class)",
    "DecimalFormat": "{}.as(DecimalFormat.class)",
    "Arg": "{}.as(Arg.class)",
    "HashMap<String,ResultStatus>": "{}.as(HashMap.class)",
    "VerhoeffCheckDigit": "{}.as(VerhoeffCheckDigit.class)",
    "float": "{}.as(float.class)",
    "CodeValidatorTest": "{}.as(CodeValidatorTest.class)",
    "HashMap<String,Object>": "{}.as(HashMap.class)",
    "TreeMap<String,String[]>": "{}.as(TreeMap.class)",
    "Map<String,String[]>": "{}.as(Map.class)",
    "ISINValidatorTest": "{}.as(ISINValidatorTest.class)",
    "EmailValidator": "{}.as(EmailValidator.class)",
    "IntegerValidatorTest": "{}.as(IntegerValidatorTest.class)",
    "ModulusTenLuhnCheckDigitTest": "{}.as(ModulusTenLuhnCheckDigitTest.class)",
    "Validator[]": "{}.as(Validator[].class)",
    "Map<String,ValidatorResult>": "{}.as(Map.class)",
    "ByteValidator": "{}.as(ByteValidator.class)",
    "HashMap<String,Form>": "{}.as(HashMap.class)",
    "ResultPair": "{}.as(ResultPair.class)",
    "ValidatorResources": "{}.as(ValidatorResources.class)",
    "TimeValidatorTest": "{}.as(TimeValidatorTest.class)",
    "InetAddressValidatorTest": "{}.as(InetAddressValidatorTest.class)",
    "DinersClub": "{}.as(DinersClub.class)",
    "IBANValidatorTest": "{}.as(IBANValidatorTest.class)",
    "CustomValidatorResourcesTest": "{}.as(CustomValidatorResourcesTest.class)",
    "ModulusTenEAN13CheckDigitTest": "{}.as(ModulusTenEAN13CheckDigitTest.class)",
    "ValidatorResult": "{}.as(ValidatorResult.class)",
    "CheckDigit": "{}.as(CheckDigit.class)",
    "ModulusTenSedolCheckDigitTest": "{}.as(ModulusTenSedolCheckDigitTest.class)",
    "DoubleValidator": "{}.as(DoubleValidator.class)",
    "BigDecimalValidator": "{}.as(BigDecimalValidator.class)",
    "Amex": "{}.as(Amex.class)",
    "StringTokenizer": "{}.as(StringTokenizer.class)",
    "ArrayList<Item>": "{}.as(ArrayList.class)",
    "BigDecimalValidatorTest": "{}.as(BigDecimalValidatorTest.class)",
    "ClassLoaderPerTestRunner": "{}.as(ClassLoaderPerTestRunner.class)",
    "SedolCheckDigit": "{}.as(SedolCheckDigit.class)",
    "ISSNCheckDigit": "{}.as(ISSNCheckDigit.class)",
    "ValidatorException": "{}.as(ValidatorException.class)",
    "CheckDigitException": "{}.as(CheckDigitException.class)",
    "BigIntegerValidator": "{}.as(BigIntegerValidator.class)",
    "DomainValidatorStartupTest": "{}.as(DomainValidatorStartupTest.class)",
    "AbstractCalendarValidator": "{}.as(AbstractCalendarValidator.class)",
    "ArrayList<CreditCardType>": "{}.as(ArrayList.class)",
    "CreditCardType": "{}.as(CreditCardType.class)",
    "LuhnCheckDigit": "{}.as(LuhnCheckDigit.class)",
    "Number[]": "{}.as(Number[].class)",
    "RegexValidator": "{}.as(RegexValidator.class)",
    "NumberFormat": "{}.as(NumberFormat.class)",
    "NoSuchMethodException": "{}.as(NoSuchMethodException.class)",
    "ISBN10CheckDigit": "{}.as(ISBN10CheckDigit.class)",
    "ByteValidatorTest": "{}.as(ByteValidatorTest.class)",
    "Field": "{}.as(Field.class)",
    "CalendarValidator": "{}.as(CalendarValidator.class)",
    "SimpleDateFormat": "{}.as(SimpleDateFormat.class)",
    "List<CodeValidator>": "{}.as(List.class)",
    "Visa": "{}.as(Visa.class)",
    "InstantiationException": "{}.as(InstantiationException.class)",
    "ArrayList<CodeValidator>": "{}.as(ArrayList.class)",
    "Entry<String,Object>": "{}.as(Entry.class)",
    "ISBNValidator": "{}.as(ISBNValidator.class)",
    "FormSet": "{}.as(FormSet.class)",
    "ABANumberCheckDigit": "{}.as(ABANumberCheckDigit.class)",
    "Format": "{}.as(Format.class)",
    "ISINValidator": "{}.as(ISINValidator.class)",
    "Msg": "{}.as(Msg.class)",
    "DecimalFormatSymbols": "{}.as(DecimalFormatSymbols.class)",
    "LuhnCheckDigitTest": "{}.as(LuhnCheckDigitTest.class)",
    "ValidatorAction": "{}.as(ValidatorAction.class)",
    "ISINCheckDigit": "{}.as(ISINCheckDigit.class)",
    "Date[]": "{}.as(Date[].class)",
    "TestCase": "{}.as(TestCase.class)",
    "InetAddressValidator": "{}.as(InetAddressValidator.class)",
    "ValidatorUtils": "{}.as(ValidatorUtils.class)",
    "Pattern[]": "{}.as(Pattern[].class)",
    "CreditCardValidator": "{}.as(CreditCardValidator.class)",
    "IDN": "{}.as(IDN.class)",
    "CUSIPCheckDigitTest": "{}.as(CUSIPCheckDigitTest.class)",
    "ISINCheckDigitTest": "{}.as(ISINCheckDigitTest.class)",
    "ModulusTenCheckDigit": "{}.as(ModulusTenCheckDigit.class)",
    "Discover": "{}.as(Discover.class)",
    "DateFormat": "{}.as(DateFormat.class)",
    "NameBean": "{}.as(NameBean.class)",
    "GenericValidatorTest": "{}.as(GenericValidatorTest.class)",
    "AbstractCalendarValidatorTest": "{}.as(AbstractCalendarValidatorTest.class)",
    "ISBNValidatorTest": "{}.as(ISBNValidatorTest.class)",
    "LongValidator": "{}.as(LongValidator.class)",
    "Collection<CreditCardType>": "{}.as(Collection.class)",
    "ResultStatus": "{}.as(ResultStatus.class)",
    "Class<?>[]": "{}.as(Class.class)",
    "CreditCardRange[]": "{}.as(CreditCardRange[].class)",
    "BigDecimal": "{}.as(BigDecimal.class)",
    "ISSNValidatorTest": "{}.as(ISSNValidatorTest.class)",
    "GenericValidator": "{}.as(GenericValidator.class)",
    "UrlValidatorTest": "{}.as(UrlValidatorTest.class)",
    "Map<String,Form>": "{}.as(Map.class)",
    "EmailValidatorTest": "{}.as(EmailValidatorTest.class)",
    "List<Item>": "{}.as(List.class)",
    "ABANumberCheckDigitTest": "{}.as(ABANumberCheckDigitTest.class)",
    "DateValidatorTest": "{}.as(DateValidatorTest.class)",
    "PercentValidatorTest": "{}.as(PercentValidatorTest.class)",
    "Map<String,Object>": "{}.as(Map.class)",
    "EAN13CheckDigitTest": "{}.as(EAN13CheckDigitTest.class)",
    "ModulusCheckDigit": "{}.as(ModulusCheckDigit.class)",
    "ShortValidatorTest": "{}.as(ShortValidatorTest.class)",
    "IBANCheckDigitTest": "{}.as(IBANCheckDigitTest.class)",
    "HashMap<String,Arg>": "{}.as(HashMap.class)",
    "Flags": "{}.as(Flags.class)",
    "ArrayList<Field>": "{}.as(ArrayList.class)",
    "CreditCardRange": "{}.as(CreditCardRange.class)",
    "ISSNCheckDigitTest": "{}.as(ISSNCheckDigitTest.class)",
    "Iterator<Arg>": "{}.as(Iterator.class)",
    "Map<String,? super Object>": "{}.as(Map.class)",
    "AbstractNumberValidatorTest": "{}.as(AbstractNumberValidatorTest.class)",
    "List<Field>": "{}.as(List.class)",
    "PatternSyntaxException": "{}.as(PatternSyntaxException.class)",
    "RegexValidatorTest": "{}.as(RegexValidatorTest.class)",
    "Log": "{}.as(Log.class)",
    "IDNBUGHOLDER": "{}.as(IDNBUGHOLDER.class)",
    "LazyHolder": "{}.as(LazyHolder.class)",
    "ParameterValidatorImpl": "{}.as(ParameterValidatorImpl.class)",
    "LogFactory": "{}.as(LogFactory.class)",
    "IntegerValidator": "{}.as(IntegerValidator.class)",
    "BigIntegerValidatorTest": "{}.as(BigIntegerValidatorTest.class)",
    "Map<String,Arg>": "{}.as(Map.class)",
    "ValueBean": "{}.as(ValueBean.class)",
    "LongValidatorTest": "{}.as(LongValidatorTest.class)",
    "DateValidator": "{}.as(DateValidator.class)",
    "DomainValidator": "{}.as(DomainValidator.class)",
    "ISBN10CheckDigitTest": "{}.as(ISBN10CheckDigitTest.class)",
    "GenericTypeValidator": "{}.as(GenericTypeValidator.class)",
    "DoubleValidatorTest": "{}.as(DoubleValidatorTest.class)",
    "Map<String,Validator>": "{}.as(Map.class)",
    "FlagsTest": "{}.as(FlagsTest.class)",
    "HashMap<String,String>": "{}.as(HashMap.class)",
    "Var": "{}.as(Var.class)",
    "CalendarValidatorTest": "{}.as(CalendarValidatorTest.class)",
    "HashMap<String,ValidatorResult>": "{}.as(HashMap.class)",
    "CodeValidator": "{}.as(CodeValidator.class)",
    "CodeValidator[]": "{}.as(CodeValidator[].class)",
    "IllegalAccessException": "{}.as(IllegalAccessException.class)",
    "ISBNCheckDigitTest": "{}.as(ISBNCheckDigitTest.class)",
    "Arg[]": "{}.as(Arg[].class)",
    "MultipartStreamTest": "{}.as(MultipartStreamTest.class)",
    "ItemInputStream": "{}.as(ItemInputStream.class)",
    "DefaultFileItemFactory": "{}.as(DefaultFileItemFactory.class)",
    "IOFileUploadException": "{}.as(IOFileUploadException.class)",
    "FileItemIteratorImpl": "{}.as(FileItemIteratorImpl.class)",
    "MyServletInputStream": "{}.as(MyServletInputStream.class)",
    "FileItemHeaders": "{}.as(FileItemHeaders.class)",
    "FileUploadBase": "{}.as(FileUploadBase.class)",
    "MalformedStreamException": "{}.as(MalformedStreamException.class)",
    "FileUpload": "{}.as(FileUpload.class)",
    "DefaultFileItem": "{}.as(DefaultFileItem.class)",
    "Streams": "{}.as(Streams.class)",
    "SizeException": "{}.as(SizeException.class)",
    "ItemSkippedException": "{}.as(ItemSkippedException.class)",
    "FileItemStreamImpl": "{}.as(FileItemStreamImpl.class)",
    "Map<String,List<String>>": "{}.as(Map.class)",
    "ProgressListener": "{}.as(ProgressListener.class)",
    "ServletRequestContext": "{}.as(ServletRequestContext.class)",
    "FileItem": "{}.as(FileItem.class)",
    "Enumeration<>": "{}.as(Enumeration.class)",
    "FileUploadException": "{}.as(FileUploadException.class)",
    "QuotedPrintableDecoder": "{}.as(QuotedPrintableDecoder.class)",
    "Hashtable<String,Object>": "{}.as(Hashtable.class)",
    "MimeUtilityTestCase": "{}.as(MimeUtilityTestCase.class)",
    "Base64Decoder": "{}.as(Base64Decoder.class)",
    "ProgressListenerImpl": "{}.as(ProgressListenerImpl.class)",
    "DiskFileItemSerializeTest": "{}.as(DiskFileItemSerializeTest.class)",
    "RequestContext": "{}.as(RequestContext.class)",
    "FileUploadIOException": "{}.as(FileUploadIOException.class)",
    "MockPortletActionRequest": "{}.as(MockPortletActionRequest.class)",
    "ProgressListenerTest": "{}.as(ProgressListenerTest.class)",
    "AtomicInteger": "{}.as(AtomicInteger.class)",
    "ParameterParserTest": "{}.as(ParameterParserTest.class)",
    "FileItemStream": "{}.as(FileItemStream.class)",
    "FileItemHeadersImpl": "{}.as(FileItemHeadersImpl.class)",
    "QuotedPrintableDecoderTestCase": "{}.as(QuotedPrintableDecoderTestCase.class)",
    "ParameterParser": "{}.as(ParameterParser.class)",
    "MultipartStream": "{}.as(MultipartStream.class)",
    "DiskFileItem": "{}.as(DiskFileItem.class)",
    "UploadContext": "{}.as(UploadContext.class)",
    "FileItemIterator": "{}.as(FileItemIterator.class)",
    "UUID": "{}.as(UUID.class)",
    "ProgressNotifier": "{}.as(ProgressNotifier.class)",
    "PortletFileUpload": "{}.as(PortletFileUpload.class)",
    "MimeUtility": "{}.as(MimeUtility.class)",
    "IllegalBoundaryException": "{}.as(IllegalBoundaryException.class)",
    "LimitedInputStream": "{}.as(LimitedInputStream.class)",
    "UnknownSizeException": "{}.as(UnknownSizeException.class)",
    "FileItemFactory": "{}.as(FileItemFactory.class)",
    "DiskFileItemFactory": "{}.as(DiskFileItemFactory.class)",
    "InvalidContentTypeException": "{}.as(InvalidContentTypeException.class)",
    "FileItemHeadersTest": "{}.as(FileItemHeadersTest.class)",
    "Enumeration<String>": "{}.as(Enumeration.class)",
    "MockHttpServletRequest": "{}.as(MockHttpServletRequest.class)",
    "SizeLimitExceededException": "{}.as(SizeLimitExceededException.class)",
    "FileItemHeadersSupport": "{}.as(FileItemHeadersSupport.class)",
    "FileCountLimitExceededException": "{}.as(FileCountLimitExceededException.class)",
    "FileSizeLimitExceededException": "{}.as(FileSizeLimitExceededException.class)",
    "Enumeration<Locale>": "{}.as(Enumeration.class)",
    "InvalidFileNameException": "{}.as(InvalidFileNameException.class)",
    "LinkedHashMap<String,List<String>>": "{}.as(LinkedHashMap.class)",
    "DefaultFileItemTest": "{}.as(DefaultFileItemTest.class)",
    "Base64DecoderTestCase": "{}.as(Base64DecoderTestCase.class)",
    "DefaultPooledObject<Object>": "{}.as(DefaultPooledObject.class)",
    "EvictionConfig": "{}.as(EvictionConfig.class)",
    "BaseObjectPool": "{}.as(BaseObjectPool.class)",
    "TestKeyedObjectPool": "{}.as(TestKeyedObjectPool.class)",
    "HashMap<K,TimerTask>": "{}.as(HashMap.class)",
    "Collection<>": "{}.as(Collection.class)",
    "SynchronizedKeyedObjectPool": "{}.as(SynchronizedKeyedObjectPool.class)",
    "BaseObjectPoolConfig": "{}.as(BaseObjectPoolConfig.class)",
    "FailingKeyedPooledObjectFactory": "{}.as(FailingKeyedPooledObjectFactory.class)",
    "ErodingFactor": "{}.as(ErodingFactor.class)",
    "ObjectPool<>": "{}.as(ObjectPool.class)",
    "TimerTask": "{}.as(TimerTask.class)",
    "WeakReference<>": "{}.as(WeakReference.class)",
    "CallStack": "{}.as(CallStack.class)",
    "Waiter": "{}.as(Waiter.class)",
    "EvictionIterator": "{}.as(EvictionIterator.class)",
    "PooledObject<V>": "{}.as(PooledObject.class)",
    "MethodCall": "{}.as(MethodCall.class)",
    "ReentrantReadWriteLock": "{}.as(ReentrantReadWriteLock.class)",
    "PooledObjectFactory<T>": "{}.as(PooledObjectFactory.class)",
    "UsageTracking<T>": "{}.as(UsageTracking.class)",
    "FactoryDE": "{}.as(FactoryDE.class)",
    "BasePooledObjectFactory<B>": "{}.as(BasePooledObjectFactory.class)",
    "ThreadDeath": "{}.as(ThreadDeath.class)",
    "InvocationTargetException": "{}.as(InvocationTargetException.class)",
    "KeyedObjectPool<>": "{}.as(KeyedObjectPool.class)",
    "BasePooledObjectFactory<String>": "{}.as(BasePooledObjectFactory.class)",
    "TestObjectPool": "{}.as(TestObjectPool.class)",
    "TestBaseKeyedPoolableObjectFactory": "{}.as(TestBaseKeyedPoolableObjectFactory.class)",
    "HashMap<WeakReference<Runnable>,WeakRunner>": "{}.as(HashMap.class)",
    "VisitTracker<K>": "{}.as(VisitTracker.class)",
    "KeyedObjectPool": "{}.as(KeyedObjectPool.class)",
    "PooledObject<Foo>": "{}.as(PooledObject.class)",
    "ParameterizedType": "{}.as(ParameterizedType.class)",
    "SleepingObjectFactory": "{}.as(SleepingObjectFactory.class)",
    "ProxySource<T>": "{}.as(ProxySource.class)",
    "LinkedBlockingDeque": "{}.as(LinkedBlockingDeque.class)",
    "KeyedObjectPoolMinIdleTimerTask<K,V>": "{}.as(KeyedObjectPoolMinIdleTimerTask.class)",
    "SynchronizedKeyedPooledObjectFactory<K,V>": "{}.as(SynchronizedKeyedPooledObjectFactory.class)",
    "HashMap<K,Integer>": "{}.as(HashMap.class)",
    "PooledSoftReference<String>": "{}.as(PooledSoftReference.class)",
    "D": "{}.as(D.class)",
    "Collection<Integer>": "{}.as(Collection.class)",
    "GenericKeyedObjectPoolMXBean": "{}.as(GenericKeyedObjectPoolMXBean.class)",
    "TestConstants": "{}.as(TestConstants.class)",
    "TestPoolImplUtils": "{}.as(TestPoolImplUtils.class)",
    "AbandonedConfig": "{}.as(AbandonedConfig.class)",
    "NotSimpleFactory": "{}.as(NotSimpleFactory.class)",
    "GenericObjectPoolConfig": "{}.as(GenericObjectPoolConfig.class)",
    "ErodingPerKeyKeyedObjectPool<K,V>": "{}.as(ErodingPerKeyKeyedObjectPool.class)",
    "BaseGenericObjectPool<?>": "{}.as(BaseGenericObjectPool.class)",
    "EvictionTimer": "{}.as(EvictionTimer.class)",
    "PooledObjectFactory": "{}.as(PooledObjectFactory.class)",
    "SynchronizedKeyedObjectPool<K,V>": "{}.as(SynchronizedKeyedObjectPool.class)",
    "StatsStore": "{}.as(StatsStore.class)",
    "PooledObjectFactory<Object>": "{}.as(PooledObjectFactory.class)",
    "Comparable<PooledObject>": "{}.as(Comparable.class)",
    "JdkProxyHandler<T>": "{}.as(JdkProxyHandler.class)",
    "HashMap<K,V>": "{}.as(HashMap.class)",
    "UsageTracking<>": "{}.as(UsageTracking.class)",
    "DefaultPooledObject": "{}.as(DefaultPooledObject.class)",
    "SoftReference<T>": "{}.as(SoftReference.class)",
    "V": "{}.as(V.class)",
    "AssertionFailedError": "{}.as(AssertionFailedError.class)",
    "InterruptibleReentrantLock": "{}.as(InterruptibleReentrantLock.class)",
    "Set<DefaultPooledObjectInfo>": "{}.as(Set.class)",
    "ProxiedKeyedObjectPool": "{}.as(ProxiedKeyedObjectPool.class)",
    "DefaultPooledObjectInfoMBean": "{}.as(DefaultPooledObjectInfoMBean.class)",
    "Predicate<MethodCall>": "{}.as(Predicate.class)",
    "GenericKeyedObjectPoolConfig<>": "{}.as(GenericKeyedObjectPoolConfig.class)",
    "K": "{}.as(K.class)",
    "IdentityWrapper<>": "{}.as(IdentityWrapper.class)",
    "Foo": "{}.as(Foo.class)",
    "ObjectPool<String>": "{}.as(ObjectPool.class)",
    "PooledObjectFactory<>": "{}.as(PooledObjectFactory.class)",
    "VisitTracker": "{}.as(VisitTracker.class)",
    "SynchronizedPooledObjectFactory": "{}.as(SynchronizedPooledObjectFactory.class)",
    "GenericObjectPoolMXBean": "{}.as(GenericObjectPoolMXBean.class)",
    "PooledObject<Long>": "{}.as(PooledObject.class)",
    "SecurityManager": "{}.as(SecurityManager.class)",
    "KeyedObjectPool<K,V>": "{}.as(KeyedObjectPool.class)",
    "PrivateException": "{}.as(PrivateException.class)",
    "AtomicLong[]": "{}.as(AtomicLong[].class)",
    "DefaultPooledObjectInfo": "{}.as(DefaultPooledObjectInfo.class)",
    "InternalError": "{}.as(InternalError.class)",
    "BaseObjectPoolConfig<T>": "{}.as(BaseObjectPoolConfig.class)",
    "KeyedObjectPool<String,TestObject>": "{}.as(KeyedObjectPool.class)",
    "ObjectPool": "{}.as(ObjectPool.class)",
    "FactoryF<Integer>": "{}.as(FactoryF.class)",
    "DefaultTrackedUse": "{}.as(DefaultTrackedUse.class)",
    "FactoryAB": "{}.as(FactoryAB.class)",
    "DestroyMode": "{}.as(DestroyMode.class)",
    "MethodCallPoolableObjectFactory": "{}.as(MethodCallPoolableObjectFactory.class)",
    "PooledObject<?>": "{}.as(PooledObject.class)",
    "ErodingObjectPool": "{}.as(ErodingObjectPool.class)",
    "AbstractItr": "{}.as(AbstractItr.class)",
    "GenericKeyedObjectPoolConfig": "{}.as(GenericKeyedObjectPoolConfig.class)",
    "A": "{}.as(A.class)",
    "BaseProxyHandler": "{}.as(BaseProxyHandler.class)",
    "Timer": "{}.as(Timer.class)",
    "ErodingKeyedObjectPool<>": "{}.as(ErodingKeyedObjectPool.class)",
    "SynchronizedPooledObjectFactory<T>": "{}.as(SynchronizedPooledObjectFactory.class)",
    "List<MethodCall>": "{}.as(List.class)",
    "PoolUtils": "{}.as(PoolUtils.class)",
    "BaseGenericObjectPool": "{}.as(BaseGenericObjectPool.class)",
    "TestObject": "{}.as(TestObject.class)",
    "FactoryAB<B,A>": "{}.as(FactoryAB.class)",
    "Node": "{}.as(Node.class)",
    "Proxy": "{}.as(Proxy.class)",
    "EvictionPolicy": "{}.as(EvictionPolicy.class)",
    "PooledSoftReference": "{}.as(PooledSoftReference.class)",
    "AtomicBoolean": "{}.as(AtomicBoolean.class)",
    "Deque<PooledObject>": "{}.as(Deque.class)",
    "Instant": "{}.as(Instant.class)",
    "WeakRunner": "{}.as(WeakRunner.class)",
    "NoOpCallStack": "{}.as(NoOpCallStack.class)",
    "BaseObject": "{}.as(BaseObject.class)",
    "ObjectPoolMinIdleTimerTask": "{}.as(ObjectPoolMinIdleTimerTask.class)",
    "ProxySource<V>": "{}.as(ProxySource.class)",
    "CglibProxySource": "{}.as(CglibProxySource.class)",
    "NoOpCallStackTest": "{}.as(NoOpCallStackTest.class)",
    "EvictionPolicy<T>": "{}.as(EvictionPolicy.class)",
    "TypeVariable<>": "{}.as(TypeVariable.class)",
    "ExecutorService": "{}.as(ExecutorService.class)",
    "InvocationHandler": "{}.as(InvocationHandler.class)",
    "CallStackTest": "{}.as(CallStackTest.class)",
    "TestGenericObjectPoolClassLoaders": "{}.as(TestGenericObjectPoolClassLoaders.class)",
    "DefaultPooledObject<T>": "{}.as(DefaultPooledObject.class)",
    "IdentityWrapper<T>": "{}.as(IdentityWrapper.class)",
    "Stream<WeakReference<Class<?>>>": "{}.as(Stream.class)",
    "Map<String,List<DefaultPooledObjectInfo>>": "{}.as(Map.class)",
    "KeyedPooledObjectFactory<K,V>": "{}.as(KeyedPooledObjectFactory.class)",
    "EvictionPolicy<>": "{}.as(EvictionPolicy.class)",
    "PooledObject<Object>": "{}.as(PooledObject.class)",
    "PooledObject<Integer>": "{}.as(PooledObject.class)",
    "Deque<E>": "{}.as(Deque.class)",
    "ObjectPool<Object>": "{}.as(ObjectPool.class)",
    "FactoryC": "{}.as(FactoryC.class)",
    "LinkedBlockingDeque<Object>": "{}.as(LinkedBlockingDeque.class)",
    "Runnable": "{}.as(Runnable.class)",
    "Executors": "{}.as(Executors.class)",
    "ArrayList<Integer>": "{}.as(ArrayList.class)",
    "KeyedPooledObjectFactory<Object,Object>": "{}.as(KeyedPooledObjectFactory.class)",
    "SynchronizedKeyedPooledObjectFactory": "{}.as(SynchronizedKeyedPooledObjectFactory.class)",
    "TimerHolder": "{}.as(TimerHolder.class)",
    "Snapshot": "{}.as(Snapshot.class)",
    "ReadLock": "{}.as(ReadLock.class)",
    "ProxiedObjectPool": "{}.as(ProxiedObjectPool.class)",
    "Collection<K>": "{}.as(Collection.class)",
    "PoolImplUtils": "{}.as(PoolImplUtils.class)",
    "Map<K,TimerTask>": "{}.as(Map.class)",
    "ThrowableCallStack": "{}.as(ThrowableCallStack.class)",
    "WeakReference<Class<?>>": "{}.as(WeakReference.class)",
    "Duration": "{}.as(Duration.class)",
    "UsageTracking<V>": "{}.as(UsageTracking.class)",
    "TestSynchronizedPooledObjectFactory": "{}.as(TestSynchronizedPooledObjectFactory.class)",
    "Condition": "{}.as(Condition.class)",
    "ProxySource": "{}.as(ProxySource.class)",
    "Consumer<PooledObject<T>>": "{}.as(Consumer.class)",
    "PooledObject<String>": "{}.as(PooledObject.class)",
    "List<DefaultPooledObjectInfo>": "{}.as(List.class)",
    "TestBaseObjectPool": "{}.as(TestBaseObjectPool.class)",
    "DefaultEvictionPolicy": "{}.as(DefaultEvictionPolicy.class)",
    "PoolTest": "{}.as(PoolTest.class)",
    "ObjectPool<TestObject>": "{}.as(ObjectPool.class)",
    "AtomicReference<Duration>": "{}.as(AtomicReference.class)",
    "TestDefaultPooledObject": "{}.as(TestDefaultPooledObject.class)",
    "CallStackUtils": "{}.as(CallStackUtils.class)",
    "PooledObject<T>": "{}.as(PooledObject.class)",
    "SoftReference<String>": "{}.as(SoftReference.class)",
    "F": "{}.as(F.class)",
    "Future<?>": "{}.as(Future.class)",
    "PrivateSecurityManager": "{}.as(PrivateSecurityManager.class)",
    "DescendingItr": "{}.as(DescendingItr.class)",
    "BaseKeyedPooledObjectFactory": "{}.as(BaseKeyedPooledObjectFactory.class)",
    "Iterator<K>": "{}.as(Iterator.class)",
    "KeyedObjectPool<String,Object>": "{}.as(KeyedObjectPool.class)",
    "List<WeakReference<Class<?>>>": "{}.as(List.class)",
    "LinkedBlockingDeque<Integer>": "{}.as(LinkedBlockingDeque.class)",
    "Map<IdentityWrapper<T>,PooledObject<T>>": "{}.as(Map.class)",
    "Itr": "{}.as(Itr.class)",
    "URLClassLoader": "{}.as(URLClassLoader.class)",
    "ErodingObjectPool<T>": "{}.as(ErodingObjectPool.class)",
    "Iterator<PooledObject<T>>": "{}.as(Iterator.class)",
    "BaseObjectPoolConfig<>": "{}.as(BaseObjectPoolConfig.class)",
    "Iterator<Integer>": "{}.as(Iterator.class)",
    "FactoryF": "{}.as(FactoryF.class)",
    "SwallowedExceptionListener": "{}.as(SwallowedExceptionListener.class)",
    "ScheduledFuture<?>": "{}.as(ScheduledFuture.class)",
    "CustomClassLoader": "{}.as(CustomClassLoader.class)",
    "ProxySource<TestObject>": "{}.as(ProxySource.class)",
    "BaseTestProxiedObjectPool": "{}.as(BaseTestProxiedObjectPool.class)",
    "DefaultEvictionPolicy<>": "{}.as(DefaultEvictionPolicy.class)",
    "ErodingKeyedObjectPool<K,V>": "{}.as(ErodingKeyedObjectPool.class)",
    "Evictor": "{}.as(Evictor.class)",
    "C": "{}.as(C.class)",
    "TestLinkedBlockingDeque": "{}.as(TestLinkedBlockingDeque.class)",
    "Entry<WeakReference<Runnable>,WeakRunner>": "{}.as(Entry.class)",
    "ErodingPerKeyKeyedObjectPool": "{}.as(ErodingPerKeyKeyedObjectPool.class)",
    "WeakReference<Runnable>": "{}.as(WeakReference.class)",
    "FactoryDE<Long,F>": "{}.as(FactoryDE.class)",
    "PooledObject<VisitTracker<K>>": "{}.as(PooledObject.class)",
    "PooledObject": "{}.as(PooledObject.class)",
    "KeyedObjectPool<Object,Object>": "{}.as(KeyedObjectPool.class)",
    "List<AtomicLong>": "{}.as(List.class)",
    "Array": "{}.as(Array.class)",
    "ArrayList<MethodCall>": "{}.as(ArrayList.class)",
    "AbstractQueue<E>": "{}.as(AbstractQueue.class)",
    "TestPoolUtils": "{}.as(TestPoolUtils.class)",
    "Map<K,Integer>": "{}.as(Map.class)",
    "PooledObject<Waiter>": "{}.as(PooledObject.class)",
    "FactoryC<D>": "{}.as(FactoryC.class)",
    "FactoryBA<C,String>": "{}.as(FactoryBA.class)",
    "Reaper": "{}.as(Reaper.class)",
    "PooledFooFactory": "{}.as(PooledFooFactory.class)",
    "TestObjectImpl": "{}.as(TestObjectImpl.class)",
    "Iterator<E>": "{}.as(Iterator.class)",
    "Class<? extends PooledObjectFactory<>>": "{}.as(Class.class)",
    "Collection<? super E>": "{}.as(Collection.class)",
    "AtomicLong": "{}.as(AtomicLong.class)",
    "VisitTrackerFactory": "{}.as(VisitTrackerFactory.class)",
    "TestEvictionConfig": "{}.as(TestEvictionConfig.class)",
    "Class<? extends T>": "{}.as(Class.class)",
    "WaiterFactory<>": "{}.as(WaiterFactory.class)",
    "PooledObjectState": "{}.as(PooledObjectState.class)",
    "Function<Class<?>,WeakReference<Class<?>>>": "{}.as(Function.class)",
    "Deque<PooledObject<T>>": "{}.as(Deque.class)",
    "InterruptedException": "{}.as(InterruptedException.class)",
    "SimpleFactory": "{}.as(SimpleFactory.class)",
    "TestPooledSoftReference": "{}.as(TestPooledSoftReference.class)",
    "SynchronizedObjectPool": "{}.as(SynchronizedObjectPool.class)",
    "ScheduledThreadPoolExecutor": "{}.as(ScheduledThreadPoolExecutor.class)",
    "Clock": "{}.as(Clock.class)",
    "Map<K,ErodingFactor>": "{}.as(Map.class)",
    "Collection<? extends E>": "{}.as(Collection.class)",
    "B": "{}.as(B.class)",
    "TimeUnit": "{}.as(TimeUnit.class)",
    "JdkProxyHandler": "{}.as(JdkProxyHandler.class)",
    "ObjectPool<T>": "{}.as(ObjectPool.class)",
    "ArrayList<PooledObject<T>>": "{}.as(ArrayList.class)",
    "VirtualMachineError": "{}.as(VirtualMachineError.class)",
    "Collection<?>": "{}.as(Collection.class)",
    "IdentityWrapper": "{}.as(IdentityWrapper.class)",
    "WaiterFactory": "{}.as(WaiterFactory.class)",
    "SynchronizedObjectPool<T>": "{}.as(SynchronizedObjectPool.class)",
    "TestTrackedUse": "{}.as(TestTrackedUse.class)",
    "Consumer<Thread>": "{}.as(Consumer.class)",
    "LinkedBlockingDeque<>": "{}.as(LinkedBlockingDeque.class)",
    "TrackedUse": "{}.as(TrackedUse.class)",
    "ErodingKeyedObjectPool": "{}.as(ErodingKeyedObjectPool.class)",
    "List<Future<?>>": "{}.as(List.class)",
    "BaseProxyHandler<T>": "{}.as(BaseProxyHandler.class)",
    "BaseObjectPool<Object>": "{}.as(BaseObjectPool.class)",
    "Class<PooledObjectFactory<>>": "{}.as(Class.class)",
    "ChronoUnit": "{}.as(ChronoUnit.class)",
    "ObjectPoolMinIdleTimerTask<T>": "{}.as(ObjectPoolMinIdleTimerTask.class)",
    "Node<E>": "{}.as(Node.class)",
    "ArrayList<Future<?>>": "{}.as(ArrayList.class)",
    "FactoryBA": "{}.as(FactoryBA.class)",
    "UsageTracking": "{}.as(UsageTracking.class)",
    "ReentrantLock": "{}.as(ReentrantLock.class)",
    "KeyedPooledObjectFactory": "{}.as(KeyedPooledObjectFactory.class)",
    "BaseTestProxiedKeyedObjectPool": "{}.as(BaseTestProxiedKeyedObjectPool.class)",
    "WriteLock": "{}.as(WriteLock.class)",
    "MethodCallLogger": "{}.as(MethodCallLogger.class)",
    "PooledObject<>": "{}.as(PooledObject.class)",
    "Map<String,TimerTask>": "{}.as(Map.class)",
    "KeyedObjectPool<String,String>": "{}.as(KeyedObjectPool.class)",
    "JdkProxySource": "{}.as(JdkProxySource.class)",
    "TypeVariable<?>": "{}.as(TypeVariable.class)",
    "BasePooledObjectFactory": "{}.as(BasePooledObjectFactory.class)",
    "SecurityManagerCallStack": "{}.as(SecurityManagerCallStack.class)",
    "KeyedObjectPoolMinIdleTimerTask": "{}.as(KeyedObjectPoolMinIdleTimerTask.class)",
    "BidirDijkstraTestCase": "{}.as(BidirDijkstraTestCase.class)",
    "DisjointSetNode": "{}.as(DisjointSetNode.class)",
    "NodeSequenceVisitor": "{}.as(NodeSequenceVisitor.class)",
    "Monoid<M>": "{}.as(Monoid.class)",
    "HashMap<VertexPair<V>,V>": "{}.as(HashMap.class)",
    "Collection<V>": "{}.as(Collection.class)",
    "Comparator<V>": "{}.as(Comparator.class)",
    "TarjanAlgorithm": "{}.as(TarjanAlgorithm.class)",
    "LinkedList<VertexPair<V>>": "{}.as(LinkedList.class)",
    "HashMap<String,Mapper<V,?>>": "{}.as(HashMap.class)",
    "Monoid": "{}.as(Monoid.class)",
    "Mapper<EdgeWrapper<WE>,W>": "{}.as(Mapper.class)",
    "ArrayList<V>": "{}.as(ArrayList.class)",
    "DefaultHeadVertexConnector<V,E>": "{}.as(DefaultHeadVertexConnector.class)",
    "TailVertexConnector<V,E>": "{}.as(TailVertexConnector.class)",
    "HashMap<V,SuperVertex<V,W,WE>>": "{}.as(HashMap.class)",
    "BoruvkaTestCase": "{}.as(BoruvkaTestCase.class)",
    "DefaultHeuristicBuilder<V,WE,W>": "{}.as(DefaultHeuristicBuilder.class)",
    "DefaultPathSourceSelector<V,WE,W>": "{}.as(DefaultPathSourceSelector.class)",
    "HashSet<SuperVertex<V,W,WE>>": "{}.as(HashSet.class)",
    "MutableGraph<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(MutableGraph.class)",
    "SccAlgorithm<V>": "{}.as(SccAlgorithm.class)",
    "DirectedGraph<V,EdgeWrapper<WE>>": "{}.as(DirectedGraph.class)",
    "ShortestDistances<V,W>": "{}.as(ShortestDistances.class)",
    "Queue<WE>": "{}.as(Queue.class)",
    "SpanningTreeSourceSelector": "{}.as(SpanningTreeSourceSelector.class)",
    "RevertedGraph": "{}.as(RevertedGraph.class)",
    "Map<Integer,Set<V>>": "{}.as(Map.class)",
    "EdmondsKarpTestCase": "{}.as(EdmondsKarpTestCase.class)",
    "HashMap<E,VertexPair<V>>": "{}.as(HashMap.class)",
    "Mapper<BaseLabeledWeightedEdge<W>,W>": "{}.as(Mapper.class)",
    "Set<Set<V>>": "{}.as(Set.class)",
    "AllVertexPairsShortestPath<V,WE,W>": "{}.as(AllVertexPairsShortestPath.class)",
    "Set<V>": "{}.as(Set.class)",
    "AbstractColoringTest": "{}.as(AbstractColoringTest.class)",
    "ExportSelector": "{}.as(ExportSelector.class)",
    "Mapper<WE,W>": "{}.as(Mapper.class)",
    "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>": "{}.as(DirectedMutableGraph.class)",
    "TailVertexConnector": "{}.as(TailVertexConnector.class)",
    "VertexPair": "{}.as(VertexPair.class)",
    "MutableGraph": "{}.as(MutableGraph.class)",
    "FlowWeightedEdgesBuilder<V,WE>": "{}.as(FlowWeightedEdgesBuilder.class)",
    "DefaultKFactorBuilder<P>": "{}.as(DefaultKFactorBuilder.class)",
    "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(DirectedMutableGraph.class)",
    "Comparable<? super E>": "{}.as(Comparable.class)",
    "BaseGraph<V,E>": "{}.as(BaseGraph.class)",
    "BaseGraph": "{}.as(BaseGraph.class)",
    "GraphSerializationTestCase": "{}.as(GraphSerializationTestCase.class)",
    "TarjanTestCase": "{}.as(TarjanTestCase.class)",
    "Iterable<V>": "{}.as(Iterable.class)",
    "HeadVertexConnector<V,E>": "{}.as(HeadVertexConnector.class)",
    "UndirectedGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(UndirectedGraph.class)",
    "List<C>": "{}.as(List.class)",
    "ColoringAlgorithmsSelector<V,E,C>": "{}.as(ColoringAlgorithmsSelector.class)",
    "DefaultLinkedConnectionBuilder": "{}.as(DefaultLinkedConnectionBuilder.class)",
    "RankingSelector<P>": "{}.as(RankingSelector.class)",
    "Map<V,W>": "{}.as(Map.class)",
    "LinkedList<BaseLabeledVertex>": "{}.as(LinkedList.class)",
    "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(UndirectedMutableGraph.class)",
    "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>": "{}.as(InMemoryWeightedPath.class)",
    "ToTailBuilder": "{}.as(ToTailBuilder.class)",
    "Collection<List<V>>": "{}.as(Collection.class)",
    "SccAlgorithmSelector<V,E>": "{}.as(SccAlgorithmSelector.class)",
    "SccAlgorithm": "{}.as(SccAlgorithm.class)",
    "BaseWeightedEdge<Double>": "{}.as(BaseWeightedEdge.class)",
    "LinkedHashSet<Set<V>>": "{}.as(LinkedHashSet.class)",
    "ArrayList<C>": "{}.as(ArrayList.class)",
    "DefaultToTailBuilder": "{}.as(DefaultToTailBuilder.class)",
    "DefaultSpanningWeightedEdgeMapperBuilder<V,WE>": "{}.as(DefaultSpanningWeightedEdgeMapperBuilder.class)",
    "DefaultLinkedConnectionBuilder<V,E,G>": "{}.as(DefaultLinkedConnectionBuilder.class)",
    "DefaultSpanningTreeAlgorithmSelector": "{}.as(DefaultSpanningTreeAlgorithmSelector.class)",
    "DefaultRankingSelector": "{}.as(DefaultRankingSelector.class)",
    "Mapper<BaseLabeledWeightedEdge<Double>,String>": "{}.as(Mapper.class)",
    "DotExporter": "{}.as(DotExporter.class)",
    "DefaultMaxFlowAlgorithmSelector<V,WE,W>": "{}.as(DefaultMaxFlowAlgorithmSelector.class)",
    "VertexPair<V>": "{}.as(VertexPair.class)",
    "Collection<List<BaseLabeledVertex>>": "{}.as(Collection.class)",
    "Map<String,Double>": "{}.as(Map.class)",
    "Mapper<V,String>": "{}.as(Mapper.class)",
    "PriorityQueue<WE>": "{}.as(PriorityQueue.class)",
    "Mapper": "{}.as(Mapper.class)",
    "Set<BaseLabeledVertex>": "{}.as(Set.class)",
    "I": "{}.as(I.class)",
    "NotEnoughColorsException": "{}.as(NotEnoughColorsException.class)",
    "SynchronizedDirectedGraph": "{}.as(SynchronizedDirectedGraph.class)",
    "HashMap<VertexPair<V>,E>": "{}.as(HashMap.class)",
    "UndirectedMutableGraph<V,E>": "{}.as(UndirectedMutableGraph.class)",
    "DefaultMaxFlowAlgorithmSelector": "{}.as(DefaultMaxFlowAlgorithmSelector.class)",
    "AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>": "{}.as(AbstractGraphConnection.class)",
    "BaseGraphVisitHandler<V,E,DirectedGraph<V,E>,W>": "{}.as(BaseGraphVisitHandler.class)",
    "DefaultVisitAlgorithmsSelector": "{}.as(DefaultVisitAlgorithmsSelector.class)",
    "H": "{}.as(H.class)",
    "Graph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(Graph.class)",
    "SynchronizedUndirectedGraph": "{}.as(SynchronizedUndirectedGraph.class)",
    "HeuristicBuilder": "{}.as(HeuristicBuilder.class)",
    "AbstractExporter<V,E,DotExporter>": "{}.as(AbstractExporter.class)",
    "Set<WE>": "{}.as(Set.class)",
    "DefaultExportSelector<V,E>": "{}.as(DefaultExportSelector.class)",
    "ShortestPathAlgorithmSelector<V,WE,W>": "{}.as(ShortestPathAlgorithmSelector.class)",
    "DefaultWeightedEdgesSelector": "{}.as(DefaultWeightedEdgesSelector.class)",
    "ConnectivityBuilder<V,E>": "{}.as(ConnectivityBuilder.class)",
    "Logger": "{}.as(Logger.class)",
    "Graph<V,E>": "{}.as(Graph.class)",
    "Mapper<E,String>": "{}.as(Mapper.class)",
    "List<WE>": "{}.as(List.class)",
    "RevertedGraph<V,E>": "{}.as(RevertedGraph.class)",
    "SynchronizedMutableGraph<V,E>": "{}.as(SynchronizedMutableGraph.class)",
    "Mapper<E,W>": "{}.as(Mapper.class)",
    "DefaultSpanningTreeSourceSelector": "{}.as(DefaultSpanningTreeSourceSelector.class)",
    "FlowWeightedEdgesBuilder": "{}.as(FlowWeightedEdgesBuilder.class)",
    "FindConnectedComponetTestCase": "{}.as(FindConnectedComponetTestCase.class)",
    "LongWeightBaseOperations": "{}.as(LongWeightBaseOperations.class)",
    "LinkedList<V>": "{}.as(LinkedList.class)",
    "DefaultSccAlgorithmSelector": "{}.as(DefaultSccAlgorithmSelector.class)",
    "CheriyanMehlhornGabowAlgorithm": "{}.as(CheriyanMehlhornGabowAlgorithm.class)",
    "PlayersRank<P>": "{}.as(PlayersRank.class)",
    "Comparator<M>": "{}.as(Comparator.class)",
    "BaseLabeledEdge": "{}.as(BaseLabeledEdge.class)",
    "MutableSpanningTree": "{}.as(MutableSpanningTree.class)",
    "MaxFlowAlgorithmSelector<V,WE,W>": "{}.as(MaxFlowAlgorithmSelector.class)",
    "HashSet<Set<V>>": "{}.as(HashSet.class)",
    "HashSet<WE>": "{}.as(HashSet.class)",
    "Path<V,E>": "{}.as(Path.class)",
    "ColoredVertices<BaseLabeledVertex,Integer>": "{}.as(ColoredVertices.class)",
    "P": "{}.as(P.class)",
    "GraphColoringTestCase": "{}.as(GraphColoringTestCase.class)",
    "TargetSourceSelector": "{}.as(TargetSourceSelector.class)",
    "TargetSourceSelector<V,WE,W>": "{}.as(TargetSourceSelector.class)",
    "UndirectedMutableGraph<V,WE>": "{}.as(UndirectedMutableGraph.class)",
    "Monoid<W>": "{}.as(Monoid.class)",
    "FlowNetworkHandler": "{}.as(FlowNetworkHandler.class)",
    "MaxFlowAlgorithmSelector": "{}.as(MaxFlowAlgorithmSelector.class)",
    "SCCAlgorithmBenchmarkTestCase": "{}.as(SCCAlgorithmBenchmarkTestCase.class)",
    "ColoringAlgorithmsSelector": "{}.as(ColoringAlgorithmsSelector.class)",
    "HashMap<E,DisjointSetNode<E>>": "{}.as(HashMap.class)",
    "Map<V,Integer>": "{}.as(Map.class)",
    "HashMap<V,V>": "{}.as(HashMap.class)",
    "FibonacciHeap<V>": "{}.as(FibonacciHeap.class)",
    "FibonacciHeap": "{}.as(FibonacciHeap.class)",
    "DefaultExportSelector": "{}.as(DefaultExportSelector.class)",
    "LinkedList<E>": "{}.as(LinkedList.class)",
    "SimplePlayersRank": "{}.as(SimplePlayersRank.class)",
    "BaseMutableGraph<V,E>": "{}.as(BaseMutableGraph.class)",
    "KruskalTestCase": "{}.as(KruskalTestCase.class)",
    "SpanningTreeAlgorithmSelector": "{}.as(SpanningTreeAlgorithmSelector.class)",
    "Iterable<BaseLabeledVertex>": "{}.as(Iterable.class)",
    "Map<E,VertexPair<V>>": "{}.as(Map.class)",
    "RankingSelector": "{}.as(RankingSelector.class)",
    "HashMap<V,TarjanVertexMetaInfo>": "{}.as(HashMap.class)",
    "List<V>": "{}.as(List.class)",
    "Mapper<V,?>": "{}.as(Mapper.class)",
    "Graph": "{}.as(Graph.class)",
    "List<Throwable>": "{}.as(List.class)",
    "Map<VertexPair<V>,V>": "{}.as(Map.class)",
    "SpanningTree<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>": "{}.as(SpanningTree.class)",
    "AbstractGraphConnection<String,GameResult>": "{}.as(AbstractGraphConnection.class)",
    "DirectedGraph<P,GameResult>": "{}.as(DirectedGraph.class)",
    "MultiThreadedTestRunner": "{}.as(MultiThreadedTestRunner.class)",
    "DefaultSpanningTreeAlgorithmSelector<V,W,WE>": "{}.as(DefaultSpanningTreeAlgorithmSelector.class)",
    "Set<E>": "{}.as(Set.class)",
    "SpanningTree<V,WE,W>": "{}.as(SpanningTree.class)",
    "ShortestEdges": "{}.as(ShortestEdges.class)",
    "TreeSet<WE>": "{}.as(TreeSet.class)",
    "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(UndirectedMutableGraph.class)",
    "DefaultVisitSourceSelector": "{}.as(DefaultVisitSourceSelector.class)",
    "Map<V,C>": "{}.as(Map.class)",
    "BaseGraphVisitHandler<V,E,Graph<V,E>,List<V>>": "{}.as(BaseGraphVisitHandler.class)",
    "SynchronizedGraph<V,E>": "{}.as(SynchronizedGraph.class)",
    "WeightedEdgesComparator": "{}.as(WeightedEdgesComparator.class)",
    "LinkedConnectionBuilder<V,E,G>": "{}.as(LinkedConnectionBuilder.class)",
    "HashSet<BaseLabeledVertex>": "{}.as(HashSet.class)",
    "HashMap<V,WE>": "{}.as(HashMap.class)",
    "Map<V,V>": "{}.as(Map.class)",
    "GraphInsert": "{}.as(GraphInsert.class)",
    "AllVertexPairsShortestPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>": "{}.as(AllVertexPairsShortestPath.class)",
    "VisitState": "{}.as(VisitState.class)",
    "DirectedGraph<String,GameResult>": "{}.as(DirectedGraph.class)",
    "NamedExportSelector<V,E>": "{}.as(NamedExportSelector.class)",
    "HashMap<BaseLabeledVertex,Double>": "{}.as(HashMap.class)",
    "SynchronizedUndirectedGraph<V,E>": "{}.as(SynchronizedUndirectedGraph.class)",
    "ArrayList<WE>": "{}.as(ArrayList.class)",
    "VisitTestCase": "{}.as(VisitTestCase.class)",
    "BaseLabeledWeightedEdge": "{}.as(BaseLabeledWeightedEdge.class)",
    "Path<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(Path.class)",
    "LinkedHashSet<V>": "{}.as(LinkedHashSet.class)",
    "List<Set<V>>": "{}.as(List.class)",
    "LinkedConnectionBuilder": "{}.as(LinkedConnectionBuilder.class)",
    "PlayersRank<String>": "{}.as(PlayersRank.class)",
    "ReverseDeleteGraph": "{}.as(ReverseDeleteGraph.class)",
    "Map<VertexPair<V>,WeightedPath<V,WE,W>>": "{}.as(Map.class)",
    "Iterator<C>": "{}.as(Iterator.class)",
    "Mapper<E,N>": "{}.as(Mapper.class)",
    "DirectedGraph<V,WE>": "{}.as(DirectedGraph.class)",
    "NegativeWeightedCycleException": "{}.as(NegativeWeightedCycleException.class)",
    "BaseMutableGraphTestCase": "{}.as(BaseMutableGraphTestCase.class)",
    "HashSet<Set<BaseLabeledVertex>>": "{}.as(HashSet.class)",
    "FromHeadBuilder": "{}.as(FromHeadBuilder.class)",
    "ConnectedComponentHandler": "{}.as(ConnectedComponentHandler.class)",
    "UndirectedMutableGraph": "{}.as(UndirectedMutableGraph.class)",
    "WeightedPath<V,E,W>": "{}.as(WeightedPath.class)",
    "WeightedPath": "{}.as(WeightedPath.class)",
    "BaseLabeledWeightedEdge<Integer>": "{}.as(BaseLabeledWeightedEdge.class)",
    "GraphExportException": "{}.as(GraphExportException.class)",
    "FibonacciHeap<WE>": "{}.as(FibonacciHeap.class)",
    "WeightedEdgesComparator<W,WE>": "{}.as(WeightedEdgesComparator.class)",
    "DefaultToTailBuilder<V,WE,W>": "{}.as(DefaultToTailBuilder.class)",
    "DefaultColorsBuilder<V,E>": "{}.as(DefaultColorsBuilder.class)",
    "AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(AbstractGraphConnection.class)",
    "DefaultColoringAlgorithmsSelector<V,E,C>": "{}.as(DefaultColoringAlgorithmsSelector.class)",
    "WO": "{}.as(WO.class)",
    "SccAlgorithmSelector": "{}.as(SccAlgorithmSelector.class)",
    "DirectedMutableGraph": "{}.as(DirectedMutableGraph.class)",
    "InMemoryPath": "{}.as(InMemoryPath.class)",
    "ConnectedComponentHandler<V,E>": "{}.as(ConnectedComponentHandler.class)",
    "DotExporter<V,E>": "{}.as(DotExporter.class)",
    "W": "{}.as(W.class)",
    "Iterator<V>": "{}.as(Iterator.class)",
    "AbstractGraphConnection": "{}.as(AbstractGraphConnection.class)",
    "DefaultRankingSelector<P>": "{}.as(DefaultRankingSelector.class)",
    "DefaultGrapher<V,E>": "{}.as(DefaultGrapher.class)",
    "Stack<FibonacciHeapNode<E>>": "{}.as(Stack.class)",
    "MapperWrapper<WE,W,WO>": "{}.as(MapperWrapper.class)",
    "GraphConnector<V,E>": "{}.as(GraphConnector.class)",
    "DefaultFlowWeightedEdgesBuilder": "{}.as(DefaultFlowWeightedEdgesBuilder.class)",
    "ExportTestCase": "{}.as(ExportTestCase.class)",
    "SpanningTreeAlgorithmSelector<V,W,WE>": "{}.as(SpanningTreeAlgorithmSelector.class)",
    "ToTailBuilder<V,WE,W>": "{}.as(ToTailBuilder.class)",
    "SuperVertex": "{}.as(SuperVertex.class)",
    "DefaultSccAlgorithmSelector<V,E>": "{}.as(DefaultSccAlgorithmSelector.class)",
    "SpanningWeightedEdgeMapperBuilder": "{}.as(SpanningWeightedEdgeMapperBuilder.class)",
    "DisjointSetNode<E>": "{}.as(DisjointSetNode.class)",
    "PathSourceSelector<V,WE,W>": "{}.as(PathSourceSelector.class)",
    "AStarTestCase": "{}.as(AStarTestCase.class)",
    "DefaultTailVertexConnector": "{}.as(DefaultTailVertexConnector.class)",
    "EdgeWeightMapper": "{}.as(EdgeWeightMapper.class)",
    "ArrayList<Set<V>>": "{}.as(ArrayList.class)",
    "UncoloredOrderedVertices<V>": "{}.as(UncoloredOrderedVertices.class)",
    "OrderedMonoid<Double>": "{}.as(OrderedMonoid.class)",
    "G": "{}.as(G.class)",
    "EdgeWrapper<WE>": "{}.as(EdgeWrapper.class)",
    "CommonsGraph": "{}.as(CommonsGraph.class)",
    "DefaultShortestPathAlgorithmSelector": "{}.as(DefaultShortestPathAlgorithmSelector.class)",
    "EdgeWrapper<>": "{}.as(EdgeWrapper.class)",
    "DefaultSpanningTreeSourceSelector<V,W,WE>": "{}.as(DefaultSpanningTreeSourceSelector.class)",
    "DefaultKFactorBuilder": "{}.as(DefaultKFactorBuilder.class)",
    "ArrayList<Thread>": "{}.as(ArrayList.class)",
    "Iterable<WE>": "{}.as(Iterable.class)",
    "InMemoryPath<Object,Object>": "{}.as(InMemoryPath.class)",
    "MutableGraph<V,E>": "{}.as(MutableGraph.class)",
    "ConnectivityBuilder": "{}.as(ConnectivityBuilder.class)",
    "DefaultPathSourceSelector": "{}.as(DefaultPathSourceSelector.class)",
    "List<Thread>": "{}.as(List.class)",
    "DefaultFlowWeightedEdgesBuilder<V,WE>": "{}.as(DefaultFlowWeightedEdgesBuilder.class)",
    "HashMap<VertexPair<V>,W>": "{}.as(HashMap.class)",
    "ShortestEdges<V,WE,W>": "{}.as(ShortestEdges.class)",
    "AllVertexPairsShortestPath": "{}.as(AllVertexPairsShortestPath.class)",
    "EdgeLabelMapper": "{}.as(EdgeLabelMapper.class)",
    "Map<VertexPair<V>,E>": "{}.as(Map.class)",
    "LinkedList<WE>": "{}.as(LinkedList.class)",
    "Category": "{}.as(Category.class)",
    "SynchronizedGraph<Object,Object>": "{}.as(SynchronizedGraph.class)",
    "UndirectedGraph<V,E>": "{}.as(UndirectedGraph.class)",
    "ShortestDistances": "{}.as(ShortestDistances.class)",
    "KFactorBuilder": "{}.as(KFactorBuilder.class)",
    "DefaultTargetSourceSelector<V,WE,W>": "{}.as(DefaultTargetSourceSelector.class)",
    "HashMap<Integer,String>": "{}.as(HashMap.class)",
    "KosarajuSharirTestCase": "{}.as(KosarajuSharirTestCase.class)",
    "Comparable<DisjointSetNode>": "{}.as(Comparable.class)",
    "GraphBuilderTestCase": "{}.as(GraphBuilderTestCase.class)",
    "O": "{}.as(O.class)",
    "BaseLabeledVertex[][]": "{}.as(BaseLabeledVertex[][].class)",
    "GraphColoringBackTrackingTestCase": "{}.as(GraphColoringBackTrackingTestCase.class)",
    "List<FibonacciHeapNode<E>>": "{}.as(List.class)",
    "PlayersRank": "{}.as(PlayersRank.class)",
    "Map<V,Set<V>>": "{}.as(Map.class)",
    "AbstractGraphConnection<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(AbstractGraphConnection.class)",
    "KosarajuSharirAlgorithm": "{}.as(KosarajuSharirAlgorithm.class)",
    "FromHeadBuilder<V,WE,W>": "{}.as(FromHeadBuilder.class)",
    "TreeMap<String,Double>": "{}.as(TreeMap.class)",
    "HeadVertexConnector": "{}.as(HeadVertexConnector.class)",
    "DirectedGraph": "{}.as(DirectedGraph.class)",
    "FlowNetworkHandler<V,EdgeWrapper<WE>,W>": "{}.as(FlowNetworkHandler.class)",
    "Map<V,WE>": "{}.as(Map.class)",
    "DefaultFromHeadBuilder<V,WE,W>": "{}.as(DefaultFromHeadBuilder.class)",
    "OrderedMonoid<Float>": "{}.as(OrderedMonoid.class)",
    "EloTestCase": "{}.as(EloTestCase.class)",
    "Set<C>": "{}.as(Set.class)",
    "DefaultConnectivityBuilder<V,E>": "{}.as(DefaultConnectivityBuilder.class)",
    "DefaultColoringAlgorithmsSelector": "{}.as(DefaultColoringAlgorithmsSelector.class)",
    "DisjointSet": "{}.as(DisjointSet.class)",
    "HashSet<V>": "{}.as(HashSet.class)",
    "Map<E,DisjointSetNode<E>>": "{}.as(Map.class)",
    "GraphVisitHandler": "{}.as(GraphVisitHandler.class)",
    "MinimumSpanningTreeBenchmarkTestCase": "{}.as(MinimumSpanningTreeBenchmarkTestCase.class)",
    "Map<BaseLabeledVertex,Double>": "{}.as(Map.class)",
    "Mapper<BaseLabeledVertex,String>": "{}.as(Mapper.class)",
    "ArrayList<BaseLabeledVertex>": "{}.as(ArrayList.class)",
    "PredecessorsList<V,E,W>": "{}.as(PredecessorsList.class)",
    "KFactorBuilder<P>": "{}.as(KFactorBuilder.class)",
    "DefaultVisitAlgorithmsSelector<V,E,G>": "{}.as(DefaultVisitAlgorithmsSelector.class)",
    "Comparator<? super E>": "{}.as(Comparator.class)",
    "SuperVertex<V,W,WE>": "{}.as(SuperVertex.class)",
    "DefaultVisitSourceSelector<V,E,G>": "{}.as(DefaultVisitSourceSelector.class)",
    "ColorsBuilder": "{}.as(ColorsBuilder.class)",
    "WeightedPath<V,WE,W>": "{}.as(WeightedPath.class)",
    "DirectedGraph<V,E>": "{}.as(DirectedGraph.class)",
    "GraphVisitHandler<V,E,G,O>": "{}.as(GraphVisitHandler.class)",
    "DefaultConnectivityBuilder": "{}.as(DefaultConnectivityBuilder.class)",
    "Set<SuperVertex<V,W,WE>>": "{}.as(Set.class)",
    "ExportSelector<V,E>": "{}.as(ExportSelector.class)",
    "BaseWeightedEdge<Integer>": "{}.as(BaseWeightedEdge.class)",
    "ShortestPathAlgorithmSelector": "{}.as(ShortestPathAlgorithmSelector.class)",
    "FloydWarshallTestCase": "{}.as(FloydWarshallTestCase.class)",
    "HashMap<VertexPair<V>,WeightedPath<V,WE,W>>": "{}.as(HashMap.class)",
    "HashMap<E,W>": "{}.as(HashMap.class)",
    "Comparator<Integer>": "{}.as(Comparator.class)",
    "N": "{}.as(N.class)",
    "BigIntegerWeightBaseOperations": "{}.as(BigIntegerWeightBaseOperations.class)",
    "ArrayList<Throwable>": "{}.as(ArrayList.class)",
    "DisjointSet<V>": "{}.as(DisjointSet.class)",
    "GraphConnection": "{}.as(GraphConnection.class)",
    "AbstractGraphConnection<V,EdgeWrapper<WE>>": "{}.as(AbstractGraphConnection.class)",
    "GraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(GraphConnection.class)",
    "MutableSpanningTree<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>": "{}.as(MutableSpanningTree.class)",
    "ColoredVertices<V,C>": "{}.as(ColoredVertices.class)",
    "PathWeightedEdgesBuilder<V,WE>": "{}.as(PathWeightedEdgesBuilder.class)",
    "HashMap<String,Mapper<E,?>>": "{}.as(HashMap.class)",
    "PathWeightedEdgesBuilder": "{}.as(PathWeightedEdgesBuilder.class)",
    "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(DirectedMutableGraph.class)",
    "DefaultWeightedEdgesSelector<V,WE>": "{}.as(DefaultWeightedEdgesSelector.class)",
    "SynchronizedGraph": "{}.as(SynchronizedGraph.class)",
    "Graph<V,WE>": "{}.as(Graph.class)",
    "HashMap<V,W>": "{}.as(HashMap.class)",
    "Entry<String,Mapper<V,?>>": "{}.as(Entry.class)",
    "ColoredVertices": "{}.as(ColoredVertices.class)",
    "BigDecimalWeightBaseOperations": "{}.as(BigDecimalWeightBaseOperations.class)",
    "DirectedGraph<>": "{}.as(DirectedGraph.class)",
    "VisitSourceSelector": "{}.as(VisitSourceSelector.class)",
    "DijkstraTestCase": "{}.as(DijkstraTestCase.class)",
    "Map<String,Mapper<V,?>>": "{}.as(Map.class)",
    "InMemoryWeightedPath": "{}.as(InMemoryWeightedPath.class)",
    "DefaultHeadVertexConnector": "{}.as(DefaultHeadVertexConnector.class)",
    "GraphException": "{}.as(GraphException.class)",
    "OrderedMonoid<W>": "{}.as(OrderedMonoid.class)",
    "Graph<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(Graph.class)",
    "Queue<V>": "{}.as(Queue.class)",
    "PathNotFoundException": "{}.as(PathNotFoundException.class)",
    "SynchronizedDirectedGraph<V,E>": "{}.as(SynchronizedDirectedGraph.class)",
    "ColorsBuilder<V,E>": "{}.as(ColorsBuilder.class)",
    "Map<String,Mapper<E,?>>": "{}.as(Map.class)",
    "Map<V,TarjanVertexMetaInfo>": "{}.as(Map.class)",
    "MutableSpanningTree<V,WE,W>": "{}.as(MutableSpanningTree.class)",
    "IntegerWeightBaseOperations": "{}.as(IntegerWeightBaseOperations.class)",
    "CheriyanMehlhornGabowAlgorithm<V,E>": "{}.as(CheriyanMehlhornGabowAlgorithm.class)",
    "TarjanVertexMetaInfo": "{}.as(TarjanVertexMetaInfo.class)",
    "Graph<BaseLabeledVertex,? extends Serializable>": "{}.as(Graph.class)",
    "GraphConnection<V,E>": "{}.as(GraphConnection.class)",
    "DefaultFromHeadBuilder": "{}.as(DefaultFromHeadBuilder.class)",
    "PrimTestCase": "{}.as(PrimTestCase.class)",
    "Stack<V>": "{}.as(Stack.class)",
    "InMemoryWeightedPath<Object,Object,W>": "{}.as(InMemoryWeightedPath.class)",
    "BaseGraph<Object,Object>": "{}.as(BaseGraph.class)",
    "VisitAlgorithmsSelector<V,E,G>": "{}.as(VisitAlgorithmsSelector.class)",
    "MapperWrapper": "{}.as(MapperWrapper.class)",
    "PredecessorsList<V,WE,W>": "{}.as(PredecessorsList.class)",
    "InMemoryPath<V,WE>": "{}.as(InMemoryPath.class)",
    "ReverseDeleteGraph<V,WE>": "{}.as(ReverseDeleteGraph.class)",
    "Mapper<BaseLabeledWeightedEdge<Double>,Double>": "{}.as(Mapper.class)",
    "DefaultColorsBuilder": "{}.as(DefaultColorsBuilder.class)",
    "FibonacciHeapNode": "{}.as(FibonacciHeapNode.class)",
    "HashSet<Integer>": "{}.as(HashSet.class)",
    "AbstractExporter": "{}.as(AbstractExporter.class)",
    "OrderedMonoid<BigInteger>": "{}.as(OrderedMonoid.class)",
    "TG": "{}.as(TG.class)",
    "FloatWeightBaseOperations": "{}.as(FloatWeightBaseOperations.class)",
    "VisitGraphBuilder": "{}.as(VisitGraphBuilder.class)",
    "Map<E,W>": "{}.as(Map.class)",
    "UncoloredOrderedVertices": "{}.as(UncoloredOrderedVertices.class)",
    "TreeMap<Integer,Set<V>>": "{}.as(TreeMap.class)",
    "OrderedMonoid<Long>": "{}.as(OrderedMonoid.class)",
    "OrderedMonoid": "{}.as(OrderedMonoid.class)",
    "VisitSourceSelector<V,E,G>": "{}.as(VisitSourceSelector.class)",
    "DefaultTailVertexConnector<V,E>": "{}.as(DefaultTailVertexConnector.class)",
    "NamedExportSelector": "{}.as(NamedExportSelector.class)",
    "VertexLabelMapper": "{}.as(VertexLabelMapper.class)",
    "FordFulkersonTestCase": "{}.as(FordFulkersonTestCase.class)",
    "PathSourceSelector": "{}.as(PathSourceSelector.class)",
    "WeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>": "{}.as(WeightedPath.class)",
    "LinkedList<List<V>>": "{}.as(LinkedList.class)",
    "HashMap<V,C>": "{}.as(HashMap.class)",
    "ArrayList<FibonacciHeapNode<E>>": "{}.as(ArrayList.class)",
    "BaseLabeledWeightedEdge<Double>": "{}.as(BaseLabeledWeightedEdge.class)",
    "Queue<E>": "{}.as(Queue.class)",
    "DefaultGrapher": "{}.as(DefaultGrapher.class)",
    "SpanningTreeSourceSelector<V,W,WE>": "{}.as(SpanningTreeSourceSelector.class)",
    "SpanningWeightedEdgeMapperBuilder<V,WE>": "{}.as(SpanningWeightedEdgeMapperBuilder.class)",
    "VisitAlgorithmsSelector": "{}.as(VisitAlgorithmsSelector.class)",
    "Weighted<W>": "{}.as(Weighted.class)",
    "S": "{}.as(S.class)",
    "OrderedMonoid<BigDecimal>": "{}.as(OrderedMonoid.class)",
    "DefaultShortestPathAlgorithmSelector<V,WE,W>": "{}.as(DefaultShortestPathAlgorithmSelector.class)",
    "ConnectivityAlgorithmsSelector": "{}.as(ConnectivityAlgorithmsSelector.class)",
    "SynchronizedMutableGraph": "{}.as(SynchronizedMutableGraph.class)",
    "Weighted": "{}.as(Weighted.class)",
    "UniVsBiDijkstraBenchmarkTestCase": "{}.as(UniVsBiDijkstraBenchmarkTestCase.class)",
    "HeuristicBuilder<V,WE,W>": "{}.as(HeuristicBuilder.class)",
    "Mapper<E,?>": "{}.as(Mapper.class)",
    "DefaultConnectivityAlgorithmsSelector": "{}.as(DefaultConnectivityAlgorithmsSelector.class)",
    "Heuristic": "{}.as(Heuristic.class)",
    "Heuristic<BaseLabeledVertex,Double>": "{}.as(Heuristic.class)",
    "FibonacciHeap<>": "{}.as(FibonacciHeap.class)",
    "TestRunner": "{}.as(TestRunner.class)",
    "TestRunner[]": "{}.as(TestRunner[].class)",
    "Iterable<E>": "{}.as(Iterable.class)",
    "Heuristic<V,W>": "{}.as(Heuristic.class)",
    "CheriyanMehlhornGabowTestCase": "{}.as(CheriyanMehlhornGabowTestCase.class)",
    "GameResult": "{}.as(GameResult.class)",
    "DefaultTargetSourceSelector": "{}.as(DefaultTargetSourceSelector.class)",
    "BaseGraphVisitHandler<V,E,G,Graph<V,E>>": "{}.as(BaseGraphVisitHandler.class)",
    "PredecessorsList": "{}.as(PredecessorsList.class)",
    "KosarajuSharirAlgorithm<V,E>": "{}.as(KosarajuSharirAlgorithm.class)",
    "GraphUtils": "{}.as(GraphUtils.class)",
    "List<BaseLabeledVertex>": "{}.as(List.class)",
    "BaseGraphVisitHandler<BaseLabeledVertex,BaseLabeledEdge,UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledEdge>,List<BaseLabeledVertex>>": "{}.as(BaseGraphVisitHandler.class)",
    "DefaultHeuristicBuilder": "{}.as(DefaultHeuristicBuilder.class)",
    "Map<VertexPair<V>,W>": "{}.as(Map.class)",
    "OrderedMonoid<Integer>": "{}.as(OrderedMonoid.class)",
    "Map<V,SuperVertex<V,W,WE>>": "{}.as(Map.class)",
    "UndirectedGraph<V,WE>": "{}.as(UndirectedGraph.class)",
    "DefaultSpanningWeightedEdgeMapperBuilder": "{}.as(DefaultSpanningWeightedEdgeMapperBuilder.class)",
    "BaseMutableGraph<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(BaseMutableGraph.class)",
    "Map<Integer,String>": "{}.as(Map.class)",
    "EdgeWrapper": "{}.as(EdgeWrapper.class)",
    "BaseGraphVisitHandler": "{}.as(BaseGraphVisitHandler.class)",
    "WE": "{}.as(WE.class)",
    "BaseLabeledVertex": "{}.as(BaseLabeledVertex.class)",
    "Entry<String,Mapper<E,?>>": "{}.as(Entry.class)",
    "HashMap<V,Integer>": "{}.as(HashMap.class)",
    "GraphConnector": "{}.as(GraphConnector.class)",
    "BaseWeightedEdge": "{}.as(BaseWeightedEdge.class)",
    "BaseMutableGraph": "{}.as(BaseMutableGraph.class)",
    "Comparator<WE>": "{}.as(Comparator.class)",
    "Collection<WE>": "{}.as(Collection.class)",
    "ConnectivityAlgorithmsSelector<V,E>": "{}.as(ConnectivityAlgorithmsSelector.class)",
    "BaseLabeledWeightedEdge<W>": "{}.as(BaseLabeledWeightedEdge.class)",
    "DefaultConnectivityAlgorithmsSelector<V,E>": "{}.as(DefaultConnectivityAlgorithmsSelector.class)",
    "HashMap<V,Set<V>>": "{}.as(HashMap.class)",
    "Set<Set<BaseLabeledVertex>>": "{}.as(Set.class)",
    "Set<?>": "{}.as(Set.class)",
    "DirectedMutableGraph<V,E>": "{}.as(DirectedMutableGraph.class)",
    "GraphConnection<BaseLabeledVertex,BaseLabeledEdge>": "{}.as(GraphConnection.class)",
    "ReverseDeleteTestCase": "{}.as(ReverseDeleteTestCase.class)",
    "InMemoryWeightedPath<V,WE,W>": "{}.as(InMemoryWeightedPath.class)",
    "DoubleWeightBaseOperations": "{}.as(DoubleWeightBaseOperations.class)",
    "BellmannFordTestCase": "{}.as(BellmannFordTestCase.class)",
    "Set<Integer>": "{}.as(Set.class)",
    "UndirectedGraph<>": "{}.as(UndirectedGraph.class)",
    "UndirectedGraph": "{}.as(UndirectedGraph.class)",
    "FibonacciHeapNode<E>": "{}.as(FibonacciHeapNode.class)",
    "Comparator<W>": "{}.as(Comparator.class)",
    "TarjanAlgorithm<V,E>": "{}.as(TarjanAlgorithm.class)",
    "VisitGraphBuilder<V,E,G>": "{}.as(VisitGraphBuilder.class)",
    "MutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>": "{}.as(MutableGraph.class)",
    "ArrayList<CurrencyUnit>": "{}.as(ArrayList.class)",
    "IllegalCurrencyException": "{}.as(IllegalCurrencyException.class)",
    "Iterator<? extends BigMoneyProvider>": "{}.as(Iterator.class)",
    "Enumeration<URL>": "{}.as(Enumeration.class)",
    "Comparable<CurrencyUnit>": "{}.as(Comparable.class)",
    "DefaultCurrencyUnitDataProvider": "{}.as(DefaultCurrencyUnitDataProvider.class)",
    "List<CurrencyUnit>": "{}.as(List.class)",
    "Comparable<>": "{}.as(Comparable.class)",
    "ConcurrentHashMap<Integer,CurrencyUnit>": "{}.as(ConcurrentHashMap.class)",
    "Currency": "{}.as(Currency.class)",
    "DataProviderRunner": "{}.as(DataProviderRunner.class)",
    "List<MoneyParser>": "{}.as(List.class)",
    "StreamCorruptedException": "{}.as(StreamCorruptedException.class)",
    "Money": "{}.as(Money.class)",
    "Money[]": "{}.as(Money[].class)",
    "BigMoney": "{}.as(BigMoney.class)",
    "Externalizable": "{}.as(Externalizable.class)",
    "ConcurrentHashMap<Locale,MoneyAmountStyle>": "{}.as(ConcurrentHashMap.class)",
    "Constructor<Money>": "{}.as(Constructor.class)",
    "TestMoneyUtils_Money": "{}.as(TestMoneyUtils_Money.class)",
    "TestCurrencyUnitExtension": "{}.as(TestCurrencyUnitExtension.class)",
    "MoneyAmountStyle": "{}.as(MoneyAmountStyle.class)",
    "MoneyFormatterBuilder": "{}.as(MoneyFormatterBuilder.class)",
    "Iterable<? extends BigMoneyProvider>": "{}.as(Iterable.class)",
    "IOAppendable": "{}.as(IOAppendable.class)",
    "BadDecimal": "{}.as(BadDecimal.class)",
    "AmountPrinterParser": "{}.as(AmountPrinterParser.class)",
    "TestMoneyFormatter": "{}.as(TestMoneyFormatter.class)",
    "Ser": "{}.as(Ser.class)",
    "MoneyUtils": "{}.as(MoneyUtils.class)",
    "Constructor<BigMoney>": "{}.as(Constructor.class)",
    "CurrencyMismatchException": "{}.as(CurrencyMismatchException.class)",
    "ConcurrentMap<String,CurrencyUnit>": "{}.as(ConcurrentMap.class)",
    "MoneyParser[]": "{}.as(MoneyParser[].class)",
    "Iterable<Money>": "{}.as(Iterable.class)",
    "Iterable<BigMoney>": "{}.as(Iterable.class)",
    "TestMoneyAmountStyle": "{}.as(TestMoneyAmountStyle.class)",
    "ConcurrentMap<Locale,MoneyAmountStyle>": "{}.as(ConcurrentMap.class)",
    "ObjectOutput": "{}.as(ObjectOutput.class)",
    "RoundingMode": "{}.as(RoundingMode.class)",
    "MoneyParseContext": "{}.as(MoneyParseContext.class)",
    "List<MoneyPrinter>": "{}.as(List.class)",
    "Entry<String,CurrencyUnit>": "{}.as(Entry.class)",
    "CurrencyUnit": "{}.as(CurrencyUnit.class)",
    "MoneyPrinter[]": "{}.as(MoneyPrinter[].class)",
    "ObjectInput": "{}.as(ObjectInput.class)",
    "ConcurrentSkipListMap<String,CurrencyUnit>": "{}.as(ConcurrentSkipListMap.class)",
    "ArrayList<MoneyPrinter>": "{}.as(ArrayList.class)",
    "TestMoneyFormatterBuilder": "{}.as(TestMoneyFormatterBuilder.class)",
    "Iterator<Money>": "{}.as(Iterator.class)",
    "InvalidObjectException": "{}.as(InvalidObjectException.class)",
    "ArithmeticException": "{}.as(ArithmeticException.class)",
    "TestIllegalCurrencyException": "{}.as(TestIllegalCurrencyException.class)",
    "Comparable<BigMoneyProvider>": "{}.as(Comparable.class)",
    "MoneyFormatter": "{}.as(MoneyFormatter.class)",
    "StringConvert": "{}.as(StringConvert.class)",
    "TestCurrencyMismatchException": "{}.as(TestCurrencyMismatchException.class)",
    "BadInteger": "{}.as(BadInteger.class)",
    "StringIndexOutOfBoundsException": "{}.as(StringIndexOutOfBoundsException.class)",
    "MultiPrinterParser": "{}.as(MultiPrinterParser.class)",
    "MoneyParser": "{}.as(MoneyParser.class)",
    "TestMoneyParseContext": "{}.as(TestMoneyParseContext.class)",
    "Singletons": "{}.as(Singletons.class)",
    "ConcurrentMap<Integer,CurrencyUnit>": "{}.as(ConcurrentMap.class)",
    "LiteralPrinterParser": "{}.as(LiteralPrinterParser.class)",
    "InvalidClassException": "{}.as(InvalidClassException.class)",
    "TestMoney": "{}.as(TestMoney.class)",
    "TestMoneyFormatterException": "{}.as(TestMoneyFormatterException.class)",
    "CurrencyUnitDataProvider": "{}.as(CurrencyUnitDataProvider.class)",
    "SingletonPrinters": "{}.as(SingletonPrinters.class)",
    "MoneyPrinter": "{}.as(MoneyPrinter.class)",
    "GroupingStyle": "{}.as(GroupingStyle.class)",
    "MoneyFormatException": "{}.as(MoneyFormatException.class)",
    "TestStringConvert": "{}.as(TestStringConvert.class)",
    "MoneyPrintContext": "{}.as(MoneyPrintContext.class)",
    "BigMoneyProvider": "{}.as(BigMoneyProvider.class)",
    "TestBigMoney": "{}.as(TestBigMoney.class)",
    "TestCurrencyUnit": "{}.as(TestCurrencyUnit.class)",
    "SignedPrinterParser": "{}.as(SignedPrinterParser.class)",
    "Iterable<BigMoneyProvider>": "{}.as(Iterable.class)",
    "ArrayList<MoneyParser>": "{}.as(ArrayList.class)",
    "Constructor<MoneyUtils>": "{}.as(Constructor.class)",
    "TestMoneyUtils_BigMoney": "{}.as(TestMoneyUtils_BigMoney.class)",
    "SecurityException": "{}.as(SecurityException.class)",
    "Class<? extends CurrencyUnitDataProvider>": "{}.as(Class.class)",
    "double[]": "{}.as(double[].class)",
    "ClassOwnership": "{}.as(ClassOwnership.class)",
    "Class<? extends DistanceMethodMethod>": "{}.as(Class.class)",
    "TypedStringConverter<>": "{}.as(TypedStringConverter.class)",
    "BooleanArrayStringConverter": "{}.as(BooleanArrayStringConverter.class)",
    "DistanceMethodConstructor": "{}.as(DistanceMethodConstructor.class)",
    "RenameHandler": "{}.as(RenameHandler.class)",
    "StringConverter<T>": "{}.as(StringConverter.class)",
    "Test3Interface": "{}.as(Test3Interface.class)",
    "Test2Interface": "{}.as(Test2Interface.class)",
    "ConstructorFromStringConverter<T>": "{}.as(ConstructorFromStringConverter.class)",
    "HashMap<String,Class<?>>": "{}.as(HashMap.class)",
    "TypeToken<Map<String,List<Integer>>>": "{}.as(TypeToken.class)",
    "Class<? extends Object>": "{}.as(Class.class)",
    "FromStringFactory": "{}.as(FromStringFactory.class)",
    "TestRenameHandler": "{}.as(TestRenameHandler.class)",
    "List<? super Integer>": "{}.as(List.class)",
    "TypedStringConverter<?>": "{}.as(TypedStringConverter.class)",
    "TestBooleanArrayStringConverterFactory": "{}.as(TestBooleanArrayStringConverterFactory.class)",
    "Validity": "{}.as(Validity.class)",
    "List<Integer>": "{}.as(List.class)",
    "float[]": "{}.as(float[].class)",
    "SubMethodMethod": "{}.as(SubMethodMethod.class)",
    "UnknownHostException": "{}.as(UnknownHostException.class)",
    "MethodFromStringConverter<>": "{}.as(MethodFromStringConverter.class)",
    "Float[]": "{}.as(Float[].class)",
    "ValidityCheck": "{}.as(ValidityCheck.class)",
    "TypedStringConverter<R>": "{}.as(TypedStringConverter.class)",
    "WildcardTypeImpl": "{}.as(WildcardTypeImpl.class)",
    "Class<? extends DistanceNoAnnotations>": "{}.as(Class.class)",
    "DistanceTwoFromStringMethodAnnotations": "{}.as(DistanceTwoFromStringMethodAnnotations.class)",
    "OptionalLongStringConverter": "{}.as(OptionalLongStringConverter.class)",
    "DistanceNoAnnotationsCharSequence": "{}.as(DistanceNoAnnotationsCharSequence.class)",
    "EnumStringConverter": "{}.as(EnumStringConverter.class)",
    "TypedStringConverter<Enum<?>>": "{}.as(TypedStringConverter.class)",
    "TypedStringConverter<SubMethodConstructor>": "{}.as(TypedStringConverter.class)",
    "TypedStringConverter<Test2Class>": "{}.as(TypedStringConverter.class)",
    "TypedStringConverter<Type>": "{}.as(TypedStringConverter.class)",
    "HasCodeInterface": "{}.as(HasCodeInterface.class)",
    "StringConverter<?>": "{}.as(StringConverter.class)",
    "JDKStringConverter": "{}.as(JDKStringConverter.class)",
    "TypeToken<List<String>>": "{}.as(TypeToken.class)",
    "TypedFromStringConverter": "{}.as(TypedFromStringConverter.class)",
    "ValidityStringConverter": "{}.as(ValidityStringConverter.class)",
    "Enum<>": "{}.as(Enum.class)",
    "Class<? extends boolean[]>": "{}.as(Class.class)",
    "Class<? extends Byte[]>": "{}.as(Class.class)",
    "ConcurrentHashMap<Class<?>,FromStringConverter<?>>": "{}.as(ConcurrentHashMap.class)",
    "FloatArrayStringConverter": "{}.as(FloatArrayStringConverter.class)",
    "CharecterArrayStringConverter": "{}.as(CharecterArrayStringConverter.class)",
    "LocalClass": "{}.as(LocalClass.class)",
    "Class<? extends Enum<?>>": "{}.as(Class.class)",
    "GenericArrayType": "{}.as(GenericArrayType.class)",
    "TypedStringConverter<T>": "{}.as(TypedStringConverter.class)",
    "TypedStringConverter<int[]>": "{}.as(TypedStringConverter.class)",
    "StringConverter<DistanceNoAnnotationsCharSequence>": "{}.as(StringConverter.class)",
    "TypeToken<List<? extends Number>>": "{}.as(TypeToken.class)",
    "TestJavaTime": "{}.as(TestJavaTime.class)",
    "DistanceTwoToStringAnnotations": "{}.as(DistanceTwoToStringAnnotations.class)",
    "Map<String,Method>": "{}.as(Map.class)",
    "StringConverter<Validity>": "{}.as(StringConverter.class)",
    "TestStringConverterFactory": "{}.as(TestStringConverterFactory.class)",
    "ArrayList<Type>": "{}.as(ArrayList.class)",
    "LocalClass<String>": "{}.as(LocalClass.class)",
    "TypeVariable<D>": "{}.as(TypeVariable.class)",
    "TestCharObjectArrayStringConverterFactory": "{}.as(TestCharObjectArrayStringConverterFactory.class)",
    "List<? extends Integer>": "{}.as(List.class)",
    "Map<String,Map<Integer,Double>>": "{}.as(Map.class)",
    "Class<R>": "{}.as(Class.class)",
    "TestJDKStringConverters": "{}.as(TestJDKStringConverters.class)",
    "TypeToken<?>": "{}.as(TypeToken.class)",
    "Map<? extends CharSequence,? extends Number>": "{}.as(Map.class)",
    "ToString": "{}.as(ToString.class)",
    "TypedStringConverter<Byte[]>": "{}.as(TypedStringConverter.class)",
    "FromStringConverter<DistanceNoAnnotations>": "{}.as(FromStringConverter.class)",
    "TypeToken<Map<String,Map<? super Integer,? extends List<? extends Number>>>>": "{}.as(TypeToken.class)",
    "TypeVariableInvocationHandler": "{}.as(TypeVariableInvocationHandler.class)",
    "TypedStringConverter<long[]>": "{}.as(TypedStringConverter.class)",
    "DistanceFromStringInvalidParameterCount": "{}.as(DistanceFromStringInvalidParameterCount.class)",
    "Test1Interface": "{}.as(Test1Interface.class)",
    "ShortArrayStringConverter": "{}.as(ShortArrayStringConverter.class)",
    "TypeToken<Map<? extends CharSequence,? extends Number>>": "{}.as(TypeToken.class)",
    "LocalClass<>": "{}.as(LocalClass.class)",
    "FromStringConverter": "{}.as(FromStringConverter.class)",
    "Test4Interface": "{}.as(Test4Interface.class)",
    "Constructor<T>": "{}.as(Constructor.class)",
    "R": "{}.as(R.class)",
    "Class<? extends double[]>": "{}.as(Class.class)",
    "InetAddress": "{}.as(InetAddress.class)",
    "Test2Factory": "{}.as(Test2Factory.class)",
    "ReflectionStringConverter": "{}.as(ReflectionStringConverter.class)",
    "GregorianCalendar": "{}.as(GregorianCalendar.class)",
    "ToStringConverter": "{}.as(ToStringConverter.class)",
    "IntArrayStringConverter": "{}.as(IntArrayStringConverter.class)",
    "Class<? extends Character[]>": "{}.as(Class.class)",
    "TypedStringConverter<short[]>": "{}.as(TypedStringConverter.class)",
    "StringConverterFactory": "{}.as(StringConverterFactory.class)",
    "TypeVariableImpl": "{}.as(TypeVariableImpl.class)",
    "StringConverterFactory[]": "{}.as(StringConverterFactory[].class)",
    "List<Type>": "{}.as(List.class)",
    "Status": "{}.as(Status.class)",
    "Class<? extends Double[]>": "{}.as(Class.class)",
    "StringConverter<DistanceNoAnnotations>": "{}.as(StringConverter.class)",
    "DistanceFromStringConstructorInvalidParameter": "{}.as(DistanceFromStringConstructorInvalidParameter.class)",
    "Test3Class": "{}.as(Test3Class.class)",
    "Map<Integer,Double>": "{}.as(Map.class)",
    "Character[]": "{}.as(Character[].class)",
    "TypeToken<Map<String,Integer>>": "{}.as(TypeToken.class)",
    "RetentionPolicy": "{}.as(RetentionPolicy.class)",
    "AltCharSequence": "{}.as(AltCharSequence.class)",
    "Class<? extends Float[]>": "{}.as(Class.class)",
    "Test4Factory": "{}.as(Test4Factory.class)",
    "Test1Class": "{}.as(Test1Class.class)",
    "OptionalIntStringConverter": "{}.as(OptionalIntStringConverter.class)",
    "OptionalDoubleStringConverter": "{}.as(OptionalDoubleStringConverter.class)",
    "TypedStringConverter<Object>": "{}.as(TypedStringConverter.class)",
    "FromStringConverter<?>": "{}.as(FromStringConverter.class)",
    "Collection<Type>": "{}.as(Collection.class)",
    "Test2Class": "{}.as(Test2Class.class)",
    "TypedStringConverter<HasCodeImpl>": "{}.as(TypedStringConverter.class)",
    "ReflectionStringConverter<T>": "{}.as(ReflectionStringConverter.class)",
    "Types": "{}.as(Types.class)",
    "TypeVariableImpl<>": "{}.as(TypeVariableImpl.class)",
    "StringConverter<DistanceMethodMethod>": "{}.as(StringConverter.class)",
    "Class<? extends Short[]>": "{}.as(Class.class)",
    "GenericArrayTypeImpl": "{}.as(GenericArrayTypeImpl.class)",
    "TypedFromStringConverter<T>": "{}.as(TypedFromStringConverter.class)",
    "FromStringConverter<T>": "{}.as(FromStringConverter.class)",
    "LinkedHashMap<String,Method>": "{}.as(LinkedHashMap.class)",
    "TypeStringConverterFactory": "{}.as(TypeStringConverterFactory.class)",
    "MethodFromStringConverter": "{}.as(MethodFromStringConverter.class)",
    "Map<String,Enum<?>>": "{}.as(Map.class)",
    "FromString": "{}.as(FromString.class)",
    "HashSet<Class<?>>": "{}.as(HashSet.class)",
    "DistanceFromStringNoToString": "{}.as(DistanceFromStringNoToString.class)",
    "Map<String,Map<? super Integer,? extends List<? extends Number>>>": "{}.as(Map.class)",
    "TypedStringConverter": "{}.as(TypedStringConverter.class)",
    "StringConverter<R>": "{}.as(StringConverter.class)",
    "Package": "{}.as(Package.class)",
    "Map<String,Class<?>>": "{}.as(Map.class)",
    "StringConverter<DistanceFromStringException>": "{}.as(StringConverter.class)",
    "TypedStringConverter<SuperFactorySub>": "{}.as(TypedStringConverter.class)",
    "TypeVisitor": "{}.as(TypeVisitor.class)",
    "Class<? extends Long[]>": "{}.as(Class.class)",
    "SuperFactorySuper": "{}.as(SuperFactorySuper.class)",
    "TypeToken<List<? super Integer>>": "{}.as(TypeToken.class)",
    "ConcurrentMap<Class<?>,FromStringConverter<?>>": "{}.as(ConcurrentMap.class)",
    "Map<? super Integer,? extends List<? extends Number>>": "{}.as(Map.class)",
    "BooleanObjectArrayStringConverterFactory": "{}.as(BooleanObjectArrayStringConverterFactory.class)",
    "TypedStringConverter<Integer[]>": "{}.as(TypedStringConverter.class)",
    "Short[]": "{}.as(Short[].class)",
    "DistanceFromStringException": "{}.as(DistanceFromStringException.class)",
    "WildcardType": "{}.as(WildcardType.class)",
    "Byte[]": "{}.as(Byte[].class)",
    "CharObjectArrayStringConverterFactory": "{}.as(CharObjectArrayStringConverterFactory.class)",
    "SubNoAnnotations": "{}.as(SubNoAnnotations.class)",
    "TypedStringConverter<DistanceWithFactory>": "{}.as(TypedStringConverter.class)",
    "Map<? super String,? super Integer>": "{}.as(Map.class)",
    "Boolean[]": "{}.as(Boolean[].class)",
    "Type[]": "{}.as(Type[].class)",
    "ToStringConverter<DistanceNoAnnotations>": "{}.as(ToStringConverter.class)",
    "ConcurrentHashMap<String,Class<?>>": "{}.as(ConcurrentHashMap.class)",
    "TypedAdapter<R>": "{}.as(TypedAdapter.class)",
    "TypeToken<List<String[]>>": "{}.as(TypeToken.class)",
    "DistanceFromStringInvalidReturnType": "{}.as(DistanceFromStringInvalidReturnType.class)",
    "List<? extends Number>": "{}.as(List.class)",
    "DistanceFromStringConstructorInvalidParameterCount": "{}.as(DistanceFromStringConstructorInvalidParameterCount.class)",
    "DistanceMethodAndConstructorAnnotations": "{}.as(DistanceMethodAndConstructorAnnotations.class)",
    "TestNumericObjectArrayStringConverterFactory": "{}.as(TestNumericObjectArrayStringConverterFactory.class)",
    "TestGuavaTypeTokenStringConverter": "{}.as(TestGuavaTypeTokenStringConverter.class)",
    "StringConverter<Integer>": "{}.as(StringConverter.class)",
    "Class<? extends float[]>": "{}.as(Class.class)",
    "LongArrayStringConverter": "{}.as(LongArrayStringConverter.class)",
    "TestByteObjectArrayStringConverterFactory": "{}.as(TestByteObjectArrayStringConverterFactory.class)",
    "List<String[]>": "{}.as(List.class)",
    "TestRenameHandlerBadInit": "{}.as(TestRenameHandlerBadInit.class)",
    "ConcurrentHashMap<String,Enum<?>>": "{}.as(ConcurrentHashMap.class)",
    "TypedStringConverter<Test2Interface>": "{}.as(TypedStringConverter.class)",
    "Enum<T>": "{}.as(Enum.class)",
    "TypedStringConverter<float[]>": "{}.as(TypedStringConverter.class)",
    "AnnotatedElement": "{}.as(AnnotatedElement.class)",
    "DistanceToStringException": "{}.as(DistanceToStringException.class)",
    "ByteArrayStringConverter": "{}.as(ByteArrayStringConverter.class)",
    "Double[]": "{}.as(Double[].class)",
    "BooleanArrayStringConverterFactory": "{}.as(BooleanArrayStringConverterFactory.class)",
    "TestBooleanObjectArrayStringConverterFactory": "{}.as(TestBooleanObjectArrayStringConverterFactory.class)",
    "Class<? extends Integer>": "{}.as(Class.class)",
    "Class<? extends Validity>": "{}.as(Class.class)",
    "TypedStringConverter<Short[]>": "{}.as(TypedStringConverter.class)",
    "TypeToken<>": "{}.as(TypeToken.class)",
    "NativeTypeVariableEquals": "{}.as(NativeTypeVariableEquals.class)",
    "Set<Type>": "{}.as(Set.class)",
    "short[]": "{}.as(short[].class)",
    "CopyOnWriteArrayList<StringConverterFactory>": "{}.as(CopyOnWriteArrayList.class)",
    "TypedStringConverter<Boolean[]>": "{}.as(TypedStringConverter.class)",
    "MockDistanceStringConverter": "{}.as(MockDistanceStringConverter.class)",
    "SubMethodConstructor": "{}.as(SubMethodConstructor.class)",
    "Map<String,? extends List<? extends Integer>>": "{}.as(Map.class)",
    "TypeStringConverter": "{}.as(TypeStringConverter.class)",
    "TypeVariableImpl<?>": "{}.as(TypeVariableImpl.class)",
    "GenericDeclaration": "{}.as(GenericDeclaration.class)",
    "ElementType": "{}.as(ElementType.class)",
    "HashSet<Type>": "{}.as(HashSet.class)",
    "ConstructorFromStringConverter": "{}.as(ConstructorFromStringConverter.class)",
    "DistanceMethodMethod": "{}.as(DistanceMethodMethod.class)",
    "DistanceToStringInvalidReturnType": "{}.as(DistanceToStringInvalidReturnType.class)",
    "TypedStringConverter<Long[]>": "{}.as(TypedStringConverter.class)",
    "ByteObjectArrayStringConverterFactory": "{}.as(ByteObjectArrayStringConverterFactory.class)",
    "HasCodeImpl": "{}.as(HasCodeImpl.class)",
    "TypedStringConverter<SuperFactorySuper>": "{}.as(TypedStringConverter.class)",
    "StringConverter<DistanceToStringException>": "{}.as(StringConverter.class)",
    "Class<Integer>": "{}.as(Class.class)",
    "TypedAdapter<>": "{}.as(TypedAdapter.class)",
    "TypedStringConverter<SubMethodMethod>": "{}.as(TypedStringConverter.class)",
    "TypedStringConverter<Test1Class>": "{}.as(TypedStringConverter.class)",
    "AtomicReference<Type>": "{}.as(AtomicReference.class)",
    "DistanceNoAnnotations": "{}.as(DistanceNoAnnotations.class)",
    "Set<Class<?>>": "{}.as(Set.class)",
    "TypedStringConverter<double[]>": "{}.as(TypedStringConverter.class)",
    "ConcurrentMap<Class<?>,TypedStringConverter<?>>": "{}.as(ConcurrentMap.class)",
    "TypeUtils": "{}.as(TypeUtils.class)",
    "ConcurrentHashMap<Class<?>,Map<String,Enum<?>>>": "{}.as(ConcurrentHashMap.class)",
    "SuperFactorySub": "{}.as(SuperFactorySub.class)",
    "AnnotationStringConverterFactory": "{}.as(AnnotationStringConverterFactory.class)",
    "HashMap<String,Enum<?>>": "{}.as(HashMap.class)",
    "HasCodeInterface<String>": "{}.as(HasCodeInterface.class)",
    "TypeToken<Map<String,Map<Integer,Double>>>": "{}.as(TypeToken.class)",
    "TypedStringConverter<Test3Class>": "{}.as(TypedStringConverter.class)",
    "DistanceFromStringInvalidParameter": "{}.as(DistanceFromStringInvalidParameter.class)",
    "Test4Class": "{}.as(Test4Class.class)",
    "TypeTokenStringConverter": "{}.as(TypeTokenStringConverter.class)",
    "TestNumericArrayStringConverterFactory": "{}.as(TestNumericArrayStringConverterFactory.class)",
    "TypedStringConverter<Status>": "{}.as(TypedStringConverter.class)",
    "Class<? extends Type>": "{}.as(Class.class)",
    "AccessControlException": "{}.as(AccessControlException.class)",
    "Class<? extends short[]>": "{}.as(Class.class)",
    "DistanceMethodMethodCharSequence": "{}.as(DistanceMethodMethodCharSequence.class)",
    "Class<? extends Enum<>>": "{}.as(Class.class)",
    "MethodFromStringConverter<T>": "{}.as(MethodFromStringConverter.class)",
    "ReflectionStringConverter<?>": "{}.as(ReflectionStringConverter.class)",
    "Class<? extends long[]>": "{}.as(Class.class)",
    "TypeCapture": "{}.as(TypeCapture.class)",
    "Class<? extends Integer[]>": "{}.as(Class.class)",
    "ConcurrentHashMap<Class<?>,TypedStringConverter<?>>": "{}.as(ConcurrentHashMap.class)",
    "TypedAdapter": "{}.as(TypedAdapter.class)",
    "TypedStringConverter<Character[]>": "{}.as(TypedStringConverter.class)",
    "DistanceToStringNoFromString": "{}.as(DistanceToStringNoFromString.class)",
    "TypedStringConverter<boolean[]>": "{}.as(TypedStringConverter.class)",
    "ConstructorFromStringConverter<>": "{}.as(ConstructorFromStringConverter.class)",
    "DoubleArrayStringConverter": "{}.as(DoubleArrayStringConverter.class)",
    "DistanceWithFactory": "{}.as(DistanceWithFactory.class)",
    "TypeToken<Map<String,? extends List<? extends Integer>>>": "{}.as(TypeToken.class)",
    "StringConverter<Object>": "{}.as(StringConverter.class)",
    "NumericObjectArrayStringConverterFactory": "{}.as(NumericObjectArrayStringConverterFactory.class)",
    "Integer[]": "{}.as(Integer[].class)",
    "SimpleTimeZone": "{}.as(SimpleTimeZone.class)",
    "NativeTypeVariableEquals<>": "{}.as(NativeTypeVariableEquals.class)",
    "TypedStringConverter<DistanceMethodMethodCharSequence>": "{}.as(TypedStringConverter.class)",
    "ParameterizedTypeImpl": "{}.as(ParameterizedTypeImpl.class)",
    "TypeToken<Map<? super String,? super Integer>>": "{}.as(TypeToken.class)",
    "TypedStringConverter<Double[]>": "{}.as(TypedStringConverter.class)",
    "ToStringConverter<T>": "{}.as(ToStringConverter.class)",
    "TypeCapture<int[]>": "{}.as(TypeCapture.class)",
    "NumericArrayStringConverterFactory": "{}.as(NumericArrayStringConverterFactory.class)",
    "EnumStringConverterFactory": "{}.as(EnumStringConverterFactory.class)",
    "Long[]": "{}.as(Long[].class)",
    "MockIntegerStringConverter": "{}.as(MockIntegerStringConverter.class)",
    "Factory1": "{}.as(Factory1.class)",
    "Test3SuperClass": "{}.as(Test3SuperClass.class)",
    "DistanceMethodConstructorCharSequence": "{}.as(DistanceMethodConstructorCharSequence.class)",
    "TypedStringConverter<DistanceMethodMethod>": "{}.as(TypedStringConverter.class)",
    "TypeVariableImpl<D>": "{}.as(TypeVariableImpl.class)",
    "TypedStringConverter<Float[]>": "{}.as(TypedStringConverter.class)",
    "TypeCapture<Entry<String,int[][]>>": "{}.as(TypeCapture.class)",
    "Entry<String,int[][]>": "{}.as(Entry.class)",
    "Map<String,List<Integer>>": "{}.as(Map.class)",
    "TypeToken<List<?>>": "{}.as(TypeToken.class)",
    "Class<? extends Boolean[]>": "{}.as(Class.class)",
    "Class<? extends int[]>": "{}.as(Class.class)",
    "JavaVersion": "{}.as(JavaVersion.class)",
    "TypedStringConverter<RoundingMode>": "{}.as(TypedStringConverter.class)",
    "DistanceWithFactoryFactory": "{}.as(DistanceWithFactoryFactory.class)",
    "Test3Factory": "{}.as(Test3Factory.class)",
    "DistanceToStringInvalidParameters": "{}.as(DistanceToStringInvalidParameters.class)"
}